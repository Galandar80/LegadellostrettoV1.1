<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <title>Calcolatore Torneo One Piece | Strumento per Organizzatori</title>
    <meta name="description" content="Calcola facilmente montepremi, costi e distribuzione premi per tornei di carte One Piece con questo strumento gratuito e completo per organizzatori">
    <meta name="keywords" content="One Piece, torneo carte, calcolatore montepremi, TCG, organizzazione tornei, carte collezionabili, distribuzione premi">
    <meta name="author" content="Organizzatori Tornei One Piece">
    <meta property="og:title" content="Calcolatore Torneo One Piece">
    <meta property="og:description" content="Strumento gratuito per calcolare montepremi e distribuzione per tornei di carte One Piece">
    <meta property="og:type" content="website">
    <meta property="og:image" content="https://loghi-famosi.com/wp-content/uploads/2021/10/One-Piece-Simbolo.png">
    <meta name="twitter:card" content="summary">
    <meta name="twitter:title" content="Calcolatore Torneo One Piece">
    <meta name="twitter:description" content="Strumento gratuito per calcolare montepremi e distribuzione per tornei di carte One Piece">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Luckiest+Guy&family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" href="https://loghi-famosi.com/wp-content/uploads/2021/10/One-Piece-Simbolo.png" type="image/png">
    <!-- Aggiunti meta tag per accessibilità -->
    <meta name="application-name" content="Calcolatore Torneo One Piece">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="default">
    <meta name="apple-mobile-web-app-title" content="Calcolatore OP">
    <meta name="format-detection" content="telephone=no">
    <meta name="mobile-web-app-capable" content="yes">
    <meta name="theme-color" content="#2E62A3">
    <!-- Libreria per grafici -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body { 
            font-family: 'Roboto', sans-serif; 
            margin: 0;
            padding: 20px;
            background-color: #2E62A3; /* Blu navy di One Piece */
            background-image: url('https://images5.alphacoders.com/132/1329624.png');
            background-size: cover;
            background-attachment: fixed;
            background-position: center;
            color: #333;
            position: relative;
        }
        
        /* Stili per il selettore di modalità */
        .mode-selector {
            display: flex;
            justify-content: center;
            margin: 15px auto;
            max-width: 600px;
            background-color: rgba(255, 255, 255, 0.8);
            border-radius: 8px;
            padding: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }
        
        .mode-btn {
            flex: 1;
            padding: 10px 15px;
            margin: 0 5px;
            background-color: #f5f5f5;
            border: 2px solid #ddd;
            border-radius: 6px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.3s ease;
            color: #555;
            box-shadow: none;
        }
        
        .mode-btn:hover {
            background-color: #e9e9e9;
            transform: translateY(-2px);
        }
        
        .mode-btn.active {
            background-color: #D70000; /* Rosso One Piece */
            color: white;
            border-color: #D70000;
        }
        
        .dark-mode .mode-selector {
            background-color: rgba(30, 30, 30, 0.8);
        }
        
        .dark-mode .mode-btn {
            background-color: #333;
            border-color: #444;
            color: #ddd;
        }
        
        .dark-mode .mode-btn:hover {
            background-color: #444;
        }
        
        .dark-mode .mode-btn.active {
            background-color: #D70000;
            color: white;
            border-color: #D70000;
        }
        
        /* Stili per il grafico e i controlli di personalizzazione */
        .chart-container {
            margin: 20px 0;
            height: 250px;
            background-color: rgba(255, 255, 255, 0.8);
            border-radius: 8px;
            padding: 15px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        
        .dark-mode .chart-container {
            background-color: rgba(30, 30, 30, 0.8);
        }
        
        .prize-distribution-controls {
            margin: 20px 0;
            background-color: rgba(255, 205, 0, 0.1);
            border-radius: 8px;
            padding: 15px;
            border-left: 4px solid #FFCD00;
        }
        
        .dark-mode .prize-distribution-controls {
            background-color: rgba(255, 205, 0, 0.05);
        }
        
        .slider-container {
            margin: 15px 0;
        }
        
        .prize-slider {
            width: 100%;
            height: 8px;
            -webkit-appearance: none;
            appearance: none;
            background: #ddd;
            outline: none;
            border-radius: 4px;
            margin-top: 8px;
        }
        
        .prize-slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: #D70000;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .prize-slider::-moz-range-thumb {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: #D70000;
            cursor: pointer;
            transition: all 0.3s ease;
            border: none;
        }
        
        .prize-slider::-webkit-slider-thumb:hover {
            transform: scale(1.2);
            box-shadow: 0 0 10px rgba(215, 0, 0, 0.5);
        }
        
        .prize-slider::-moz-range-thumb:hover {
            transform: scale(1.2);
            box-shadow: 0 0 10px rgba(215, 0, 0, 0.5);
        }
        
        .dark-mode .prize-slider {
            background: #444;
        }
        
        /* Stili per la modalità avanzata */
        .advanced-input {
            margin-bottom: 18px;
            position: relative;
        }
        
        .advanced-label {
            color: #2E62A3;
            font-weight: 600;
            margin-bottom: 6px;
            display: block;
        }
        
        .advanced-number-input, .advanced-select {
            border: 2px solid #ddd;
            border-radius: 6px;
            padding: 10px 12px;
            width: 100%;
            transition: all 0.3s ease;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        
        .advanced-number-input:focus, .advanced-select:focus {
            border-color: #62C3F8;
            box-shadow: 0 0 0 3px rgba(98, 195, 248, 0.2);
            outline: none;
        }
        
        .advanced-checkbox {
            background-color: rgba(255, 205, 0, 0.1);
            padding: 12px 15px;
            border-radius: 6px;
            border-left: 3px solid #FFCD00;
            display: flex;
            align-items: center;
            margin-bottom: 20px;
        }
        
        .checkbox-label {
            margin-left: 8px;
            font-weight: 600;
            color: #333;
        }
        
        .advanced-prize-section {
            background-color: rgba(46, 98, 163, 0.05);
            border-radius: 8px;
            padding: 20px;
            margin-top: 15px;
            border: 1px solid rgba(46, 98, 163, 0.1);
        }
        
        .advanced-subtitle {
            color: #D70000;
            font-size: 1.2em;
            margin-top: 0;
            margin-bottom: 15px;
            border-bottom: 2px solid rgba(215, 0, 0, 0.1);
            padding-bottom: 8px;
        }
        
        .advanced-table-container {
            margin: 15px 0;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        
        .advanced-table {
            width: 100%;
            border-collapse: collapse;
        }
        
        .advanced-table th {
            background-color: #2E62A3;
            color: white;
            padding: 12px 15px;
            text-align: left;
            font-weight: 600;
            font-size: 0.9em;
        }
        
        .advanced-table td {
            padding: 10px 15px;
            border-bottom: 1px solid #eee;
        }
        
        .advanced-table tr:hover {
            background-color: rgba(255, 205, 0, 0.05);
        }
        
        .total-value {
            font-weight: bold;
            color: #D70000;
        }
        
        .advanced-highlight {
            background-color: rgba(255, 255, 255, 0.9);
            border-radius: 8px;
            padding: 18px;
            margin: 15px 0;
            border-left: 4px solid #2E62A3;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        
        .advanced-stats dt {
            font-weight: 600;
            color: #2E62A3;
            margin-bottom: 5px;
        }
        
        .advanced-stats dd {
            margin-left: 0;
            margin-bottom: 12px;
            font-size: 1.1em;
        }
        
        .stat-value {
            font-weight: 600;
        }
        
        .advanced-chart {
            background-color: rgba(255, 255, 255, 0.9);
            border-radius: 8px;
            padding: 20px;
            margin: 20px 0;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            height: 280px;
        }
        
        .section-title {
            color: #D70000;
            font-family: 'Luckiest Guy', cursive;
            margin-top: 0;
            margin-bottom: 20px;
            font-size: 1.6em;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.2);
            border-bottom: 2px solid rgba(215, 0, 0, 0.1);
            padding-bottom: 10px;
        }
        
        .advanced-button {
            background-color: #D70000;
            color: white;
            font-weight: bold;
            padding: 12px 20px;
            border-radius: 8px;
            border: none;
            box-shadow: 0 4px 8px rgba(215, 0, 0, 0.3);
            transition: all 0.3s ease;
            font-size: 1.1em;
            cursor: pointer;
            width: 100%;
            margin: 20px 0;
        }
        
        .advanced-button:hover {
            background-color: #B50000;
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(215, 0, 0, 0.4);
        }
        
        .advanced-button-group {
            display: flex;
            gap: 12px;
            margin-top: 20px;
            flex-wrap: wrap;
        }
        
        .advanced-action-button {
            background-color: #2E62A3;
            color: white;
            font-weight: 600;
            padding: 10px 15px;
            border-radius: 6px;
            border: none;
            box-shadow: 0 2px 6px rgba(46, 98, 163, 0.3);
            transition: all 0.3s ease;
        }
        
        .advanced-action-button:hover {
            background-color: #1D4B8F;
            transform: translateY(-2px);
        }
        
        .advanced-reset-button {
            background-color: #AF6528;
            color: white;
            font-weight: 600;
            padding: 10px 15px;
            border-radius: 6px;
            border: none;
            box-shadow: 0 2px 6px rgba(175, 101, 40, 0.3);
            transition: all 0.3s ease;
            width: 100%;
        }
        
        .advanced-reset-button:hover {
            background-color: #8E5020;
            transform: translateY(-2px);
        }
        
        /* Stili per la modalità simulazione */
        .simulation-controls {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 15px;
            margin-bottom: 20px;
        }
        
        @media (max-width: 768px) {
            .simulation-controls {
                grid-template-columns: 1fr;
            }
            
            .advanced-table-container {
                overflow-x: auto;
            }
            
            .advanced-table {
                min-width: 600px;
            }
            
            .advanced-prize-section {
                padding: 15px 10px;
            }
            
            .advanced-highlight {
                padding: 15px 10px;
            }
        }
        
        .table-responsive {
            overflow-x: auto;
            margin: 15px 0;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        
        .simulation-table {
            width: 100%;
            border-collapse: collapse;
            margin: 0;
        }
        
        .simulation-table th {
            background-color: #2E62A3;
            color: white;
            padding: 10px;
            text-align: left;
            white-space: nowrap;
        }
        
        .simulation-table td {
            padding: 8px 10px;
            border-bottom: 1px solid #ddd;
        }
        
        .simulation-table tr:hover {
            background-color: rgba(255, 205, 0, 0.1);
        }
        
        .highlight-row {
            background-color: rgba(255, 205, 0, 0.2);
            font-weight: bold;
        }
        
        .dark-mode .highlight-row {
            background-color: rgba(255, 205, 0, 0.1);
        }
        
        /* Stili per la modalità storia tornei */
        .tournament-details {
            margin: 15px 0;
            line-height: 1.6;
        }
        
        .history-stats {
            background-color: rgba(46, 98, 163, 0.1);
            border-radius: 8px;
            padding: 15px;
            margin: 15px 0;
            border-left: 4px solid #2E62A3;
        }
        
        .dark-mode .history-stats {
            background-color: rgba(46, 98, 163, 0.05);
        }
        
        /* Stili migliorati per le tabelle nella sezione avanzata */
        .prize-table, .simulation-table, .metrics-table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
            margin: 15px 0;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        
        .prize-table th, .simulation-table th, .metrics-table th {
            background-color: #2E62A3;
            color: white;
            font-weight: bold;
            text-align: left;
            padding: 12px 15px;
            font-size: 0.9em;
            letter-spacing: 0.5px;
            border: none;
        }
        
        .prize-table td, .simulation-table td, .metrics-table td {
            padding: 10px 15px;
            border-bottom: 1px solid #e0e0e0;
            transition: background-color 0.2s ease;
        }
        
        .prize-table tr:last-child td, .simulation-table tr:last-child td, .metrics-table tr:last-child td {
            border-bottom: none;
        }
        
        .prize-table tr:hover td, .simulation-table tr:hover td, .metrics-table tr:hover td {
            background-color: rgba(255, 205, 0, 0.05);
        }
        
        /* Stili per le caselle di input nella sezione avanzata */
        .prize-section input[type="number"], 
        .prize-section input[type="text"] {
            width: 100%;
            padding: 8px 10px;
            border: 2px solid #ddd;
            border-radius: 4px;
            transition: all 0.3s ease;
            font-size: 0.95em;
        }
        
        .prize-section input:focus {
            border-color: #FFCD00;
            box-shadow: 0 0 0 3px rgba(255, 205, 0, 0.2);
            outline: none;
        }
        
        /* Stili per i gruppi di pulsanti */
        .button-group {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin: 15px 0;
        }
        
        /* Stili per elementi nascosti accessibili agli screen reader */
        .sr-only {
            position: absolute;
            width: 1px;
            height: 1px;
            padding: 0;
            margin: -1px;
            overflow: hidden;
            clip: rect(0, 0, 0, 0);
            white-space: nowrap;
            border: 0;
        }
        
        /* Stili per liste di definizione nelle statistiche */
        .stats-list {
            margin: 0;
            padding: 0;
        }
        
        .stats-list dt {
            font-weight: bold;
            color: #2E62A3;
            margin-top: 8px;
            font-size: 0.95em;
        }
        
        .stats-list dd {
            margin-left: 0;
            margin-bottom: 8px;
            padding-bottom: 8px;
            border-bottom: 1px dotted #eee;
        }
        
        .stats-list dd:last-child {
            border-bottom: none;
        }
        
        .modal-buttons {
            display: flex;
            justify-content: flex-end;
            margin-top: 20px;
        }
        
        .total-percentage {
            text-align: center;
            font-weight: bold;
            margin-top: 15px;
            font-size: 1.1em;
        }
        
        .small-btn {
            padding: 5px 10px;
            font-size: 0.8em;
            background-color: #2E62A3;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-left: 10px;
            vertical-align: middle;
            transition: all 0.3s ease;
        }
        
        .small-btn:hover {
            background-color: #1D4B8F;
            transform: translateY(-2px);
        }
        
        body::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.7);
            z-index: -1;
        }
        /* Header del calcolatore */
        .header {
            text-align: center;
            margin-bottom: 30px;
        }
        
        .header h1 {
            font-family: 'Luckiest Guy', cursive;
            color: #D70000; /* Rosso One Piece */
            font-size: 2.5em;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
            margin: 0;
            letter-spacing: 1px;
        }
        
        .header img {
            max-width: 200px;
            margin: 10px auto;
            display: block;
        }
        
        /* Gruppi di checkbox */
        .checkbox-group {
            display: flex;
            align-items: center;
            gap: 10px;
            background-color: rgba(255, 205, 0, 0.1); /* Giallo One Piece con trasparenza */
            padding: 10px;
            border-radius: 4px;
            border-left: 3px solid #FFCD00; /* Bordo giallo */
        }
        
        .checkbox-group input[type="checkbox"] {
            width: auto;
            margin-right: 5px;
        }
        
        /* Layout principale */
        .grid-container {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 20px;
            max-width: 1400px;
            margin: 0 auto;
        }
        
        /* Media queries per layout responsive */
        @media (max-width: 1024px) {
            .grid-container {
                grid-template-columns: repeat(2, 1fr);
            }
        }
        
        @media (max-width: 768px) {
            .grid-container {
                grid-template-columns: 1fr;
            }
            
            .header h1 {
                font-size: 2em;
            }
            
            .header img {
                max-width: 150px;
            }
            
            .theme-toggle {
                top: 10px;
                right: 10px;
                width: 35px;
                height: 35px;
                font-size: 16px;
            }
            
            .export-buttons {
                flex-direction: column;
            }
            
            .export-button {
                margin-bottom: 10px;
            }
        }
        
        @media (max-width: 480px) {
            body {
                padding: 10px;
            }
            
            .header h1 {
                font-size: 1.5em;
            }
            
            .column-base, .input-column, .prize-column, .finance-column {
                padding: 15px;
            }
            
            th, td {
                padding: 8px 10px;
                font-size: 0.8em;
            }
            
            .modal-content {
                width: 90%;
                margin: 15% auto;
                padding: 15px;
            }
            
            .input-group {
                margin: 10px 0;
            }
            
            input {
                padding: 8px 10px;
                font-size: 0.9em;
            }
            
            button {
                padding: 10px;
                font-size: 1em;
            }
            
            .tooltip .tooltiptext {
                width: 160px;
                margin-left: -80px;
            }
            
            .mode-selector {
                flex-wrap: wrap;
                gap: 5px;
            }
            
            .mode-btn {
                padding: 8px 5px;
                font-size: 0.8em;
                margin: 2px;
            }
            
            .chart-container {
                height: 200px;
                padding: 10px;
            }
            
            .prize-distribution-controls {
                padding: 10px;
            }
            
            .slider-container {
                margin: 10px 0;
            }
            
            .small-btn {
                padding: 3px 6px;
                font-size: 0.7em;
            }
        }
        
        /* Stili per la stampa */
        @media print {
            body {
                background-image: none;
                background-color: white;
                padding: 0;
                font-size: 12pt;
            }
            
            body::before {
                display: none;
            }
            
            .grid-container {
                display: block;
            }
            
            .input-column, .prize-column, .finance-column {
                margin-bottom: 20px;
                box-shadow: none;
                border: 1px solid #ddd;
            }
            
            button, .no-print {
                display: none !important;
            }
            
            table {
                page-break-inside: avoid;
            }
            
            .header img {
                max-width: 120px;
            }
        }
        
        /* Stile per il footer */
        .footer {
            text-align: center;
            margin-top: 40px;
            padding: 20px;
            font-size: 0.9em;
            color: #666;
            border-top: 1px solid #eee;
        }
        
        /* Stile per il modal di condivisione */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4);
        }
        
        .modal-content {
            background-color: white;
            margin: 10% auto;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
            max-width: 500px;
            position: relative;
        }
        
        .dark-mode .modal-content {
            background-color: #1e1e1e;
            color: #e0e0e0;
        }
        
        .close-modal {
            position: absolute;
            right: 15px;
            top: 10px;
            font-size: 24px;
            cursor: pointer;
        }
        
        .share-code {
            width: 100%;
            padding: 10px;
            margin: 15px 0;
            background-color: #f5f5f5;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-family: monospace;
        }
        
        .dark-mode .share-code {
            background-color: #2d2d2d;
            border-color: #444;
            color: #e0e0e0;
        }
        
        .copy-btn {
            background-color: #2E62A3;
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 4px;
            cursor: pointer;
            font-weight: bold;
        }
        
        .copy-btn:hover {
            background-color: #1D4B8F;
        }
        
        /* Stile per la validazione */
        input:invalid, input.invalid {
            border-color: #D70000;
            background-color: rgba(215, 0, 0, 0.05);
            animation: shake 0.5s ease-in-out;
        }
        
        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            20%, 60% { transform: translateX(-5px); }
            40%, 80% { transform: translateX(5px); }
        }
        
        .validation-message {
            color: #D70000;
            font-size: 0.85em;
            margin-top: 5px;
            display: none;
            animation: fadeIn 0.3s ease-in-out;
        }
        
        /* Stile comune per le colonne */
        .column-base {
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
            background-color: white;
            border-top: 5px solid;
        }
        
        .input-column {
            composes: column-base;
            border-top-color: #D70000; /* Rosso One Piece */
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        
        .prize-column {
            composes: column-base;
            border-top-color: #FFCD00; /* Giallo One Piece */
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        
        .finance-column {
            composes: column-base;
            border-top-color: #62C3F8; /* Blu cielo One Piece */
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        .input-group { 
            margin: 15px 0;
            position: relative;
        }
        
        label { 
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #2E62A3; /* Blu navy One Piece */
            font-size: 0.95em;
        }
        
        input {
            width: 100%;
            padding: 10px 12px;
            border: 2px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
            transition: border-color 0.3s;
            font-size: 1em;
        }
        
        input:focus {
            border-color: #62C3F8; /* Blu cielo One Piece */
            outline: none;
            box-shadow: 0 0 0 3px rgba(98, 195, 248, 0.2);
        }
        
        input[type="checkbox"] {
            width: 18px;
            height: 18px;
            accent-color: #D70000; /* Rosso One Piece */
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 15px 0;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        
        th, td {
            padding: 12px 15px;
            border: 1px solid #e0e0e0;
            text-align: left;
            font-size: 0.9em;
        }
        
        th {
            background-color: #2E62A3; /* Blu navy One Piece */
            color: white;
            font-weight: bold;
            text-transform: uppercase;
            font-size: 0.85em;
            letter-spacing: 0.5px;
        }
        
        tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        
        tr:hover {
            background-color: #f1f1f1;
        }
        .highlight {
            background-color: rgba(255, 205, 0, 0.1); /* Giallo One Piece con trasparenza */
            padding: 20px;
            border-radius: 8px;
            margin: 15px 0;
            border-left: 4px solid #FFCD00; /* Bordo giallo */
        }
        
        .red { color: #D70000; /* Rosso One Piece */ }
        .green { color: #008000; /* Verde */ }
        
        .suggestion { 
            color: #6c757d;
            font-size: 0.85em;
            display: block;
            margin-top: 5px;
            font-style: italic;
        }
        
        .boosters-config {
            margin: 20px 0;
            padding: 20px;
            background-color: rgba(98, 195, 248, 0.1); /* Blu cielo One Piece con trasparenza */
            border-radius: 8px;
            border-left: 4px solid #62C3F8; /* Bordo blu cielo */
        }
        h2 {
            color: #D70000; /* Rosso One Piece */
            font-family: 'Luckiest Guy', cursive;
            margin-top: 0;
            font-size: 1.6em;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
            letter-spacing: 0.5px;
            position: relative;
            padding-bottom: 10px;
        }
        
        h2::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 50px;
            height: 3px;
            background-color: #FFCD00; /* Giallo One Piece */
        }
        
        h3 {
            color: #2E62A3; /* Blu navy One Piece */
            margin-top: 0;
            font-size: 1.3em;
        }
        
        h4 {
            color: #AF6528; /* Marrone One Piece */
            margin-top: 0;
            font-size: 1.1em;
        }
        
        button {
            width: 100%;
            padding: 14px;
            background: #D70000; /* Rosso One Piece */
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 1.1em;
            margin: 15px 0;
            font-weight: bold;
            text-transform: uppercase;
            letter-spacing: 1px;
            transition: all 0.3s ease;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            position: relative;
            overflow: hidden;
        }
        
        button:hover {
            background: #AF6528; /* Marrone One Piece */
            transform: translateY(-2px);
            box-shadow: 0 6px 8px rgba(0,0,0,0.15);
        }
        
        button::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: 0.5s;
        }
        
        button:hover::before {
            left: 100%;
        }
        
        .button-icon {
            display: inline-block;
            margin: 0 8px;
            font-size: 1.2em;
        }
        
        /* Icone tematiche per le sezioni */
        h2::before {
            margin-right: 10px;
            font-size: 1.2em;
        }
        
        .input-column h2::before {
            content: '🏴‍☠️';
        }
        
        .prize-column h2::before {
            content: '💰';
        }
        
        .finance-column h2::before {
            content: '📊';
        }
        
        /* Stili per le posizioni del podio */
        .gold-position {
            background-color: rgba(255, 205, 0, 0.15);
        }
        
        .gold-position td:first-child {
            font-weight: bold;
            color: #FFCD00;
            text-shadow: 1px 1px 1px rgba(0,0,0,0.2);
        }
        
        .silver-position {
            background-color: rgba(192, 192, 192, 0.15);
        }
        
        .silver-position td:first-child {
            font-weight: bold;
            color: #808080;
            text-shadow: 1px 1px 1px rgba(0,0,0,0.2);
        }
        
        .bronze-position {
            background-color: rgba(175, 101, 40, 0.15);
        }
        
        .bronze-position td:first-child {
            font-weight: bold;
            color: #AF6528;
            text-shadow: 1px 1px 1px rgba(0,0,0,0.2);
        }
        
        .table-icon {
            display: inline-block;
            margin-right: 5px;
        }
        
        /* Effetto hover sulle righe della tabella */
        .prize-table tr:hover {
            background-color: rgba(98, 195, 248, 0.1);
        }
        
        /* Stile per il montepremi totale */
        #totalPrizePool {
            color: #D70000;
            font-weight: bold;
            font-size: 1.1em;
        }
        
        /* Stili per la tabella finanziaria */
        .finance-table .total-row {
            background-color: rgba(46, 98, 163, 0.1);
            font-weight: bold;
        }
        
        .finance-table .profit-row {
            background-color: rgba(215, 0, 0, 0.05);
            font-size: 1.05em;
        }
        
        /* Stile per il dettaglio costi */
        .highlight h3 {
            display: flex;
            align-items: center;
        }
        
        .highlight h3::before {
            content: '📋';
            margin-right: 10px;
        }
        
        .highlight div {
            padding: 5px 0;
            display: flex;
            align-items: center;
        }
        
        .highlight div::before {
            content: '➤';
            margin-right: 10px;
            color: #2E62A3;
        }
        
        /* Stili per i pulsanti di esportazione */
        .export-buttons {
            display: flex;
            gap: 10px;
            margin-top: 20px;
            justify-content: center;
        }
        
        .export-button {
            padding: 10px 15px;
            background: #2E62A3;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9em;
            font-weight: bold;
            display: flex;
            align-items: center;
            gap: 5px;
            transition: all 0.3s ease;
        }
        
        .export-button:hover {
            background: #1D4B8F;
            transform: translateY(-2px);
        }
        
        .export-button.print-btn::before {
            content: '🖨️';
        }
        
        .export-button.pdf-btn::before {
            content: '📄';
        }
        
        /* Tema scuro */
        .dark-mode {
            background-color: #121212;
            color: #e0e0e0;
        }
        
        .dark-mode .column-base,
        .dark-mode .input-column,
        .dark-mode .prize-column,
        .dark-mode .finance-column {
            background-color: #1e1e1e;
            color: #e0e0e0;
            box-shadow: 0 4px 8px rgba(0,0,0,0.4);
        }
        
        .dark-mode input {
            background-color: #2d2d2d;
            color: #e0e0e0;
            border-color: #444;
        }
        
        .dark-mode th {
            background-color: #1D4B8F;
        }
        
        .dark-mode tr:nth-child(even) {
            background-color: #2a2a2a;
        }
        
        .dark-mode tr:hover {
            background-color: #333;
        }
        
        .dark-mode .highlight {
            background-color: rgba(255, 205, 0, 0.05);
        }
        
        .dark-mode .boosters-config {
            background-color: rgba(98, 195, 248, 0.05);
        }
        
        .dark-mode label {
            color: #62C3F8;
        }
        
        /* Tema toggle */
        .theme-toggle {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 100;
            background-color: #2E62A3;
            color: white;
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            transition: all 0.3s ease;
        }
        
        .theme-toggle:hover {
            transform: scale(1.1);
        }
        
        /* Tooltip */
        .tooltip {
            position: relative;
            display: inline-block;
            margin-left: 5px;
            cursor: help;
        }
        
        .tooltip .tooltiptext {
            visibility: hidden;
            width: 200px;
            background-color: #2E62A3;
            color: white;
            text-align: center;
            border-radius: 6px;
            padding: 10px;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 50%;
            margin-left: -100px;
            opacity: 0;
            transition: opacity 0.3s;
            font-size: 0.85em;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }
        
        .tooltip .tooltiptext::after {
            content: "";
            position: absolute;
            top: 100%;
            left: 50%;
            margin-left: -5px;
            border-width: 5px;
            border-style: solid;
            border-color: #2E62A3 transparent transparent transparent;
        }
        
        .tooltip:hover .tooltiptext {
            visibility: visible;
            opacity: 1;
        }
        
        /* Animazioni */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
        
        @keyframes slideInRight {
            from { opacity: 0; transform: translateX(30px); }
            to { opacity: 1; transform: translateX(0); }
        }
        
        @keyframes slideInLeft {
            from { opacity: 0; transform: translateX(-30px); }
            to { opacity: 1; transform: translateX(0); }
        }
        
        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            20%, 60% { transform: translateX(-5px); }
            40%, 80% { transform: translateX(5px); }
        }
        
        .fade-in {
            animation: fadeIn 0.5s ease-in-out;
        }
        
        .pulse {
            animation: pulse 0.5s ease-in-out;
        }
        
        .slide-in-right {
            animation: slideInRight 0.5s ease-in-out;
        }
        
        .slide-in-left {
            animation: slideInLeft 0.5s ease-in-out;
        }
        
        /* Notifica di salvataggio */
        .save-notification {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background-color: #4CAF50;
            color: white;
            padding: 15px 20px;
            border-radius: 4px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            display: none;
            z-index: 1000;
            animation: fadeIn 0.3s ease-in-out;
            font-weight: bold;
            font-size: 1.1em;
        }
        
        .dark-mode .save-notification {
            background-color: #2d6a30;
            box-shadow: 0 2px 5px rgba(0,0,0,0.4);
        }
        
        /* Stile per il pulsante di reset */
        .reset-button:hover {
            background-color: #8B4513 !important;
        }
    </style>
    <!-- Script per generazione PDF -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js" integrity="sha512-GsLlZN/3F2ErC5ifS5QtgpiJtWd43JWSuIgh7mbzZ8zBps+dvLusV+eNQATqgA/HdeKFVgA5v3S/cIrLF7QnIg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
</head>
<body>
    <button id="themeToggle" class="theme-toggle" title="Cambia tema" aria-label="Cambia tema chiaro/scuro">☀️</button>
    <div class="save-notification" id="saveNotification" role="alert" aria-live="polite">Configurazione salvata!</div>
    
    <div class="header" role="banner">
        <h1>CALCOLATORE TORNEO ONE PIECE</h1>
        <img src="https://loghi-famosi.com/wp-content/uploads/2021/10/One-Piece-Logo.png" alt="Logo One Piece" title="One Piece Logo">
        <p class="version">v3.0 - Calcolatore avanzato per tornei di carte</p>
    </div>
    
    <!-- Selettore lingua -->
    <div class="language-selector" role="navigation" aria-label="Selettore lingua">
        <select id="languageSelect" aria-label="Seleziona lingua">
            <option value="it" selected>Italiano</option>
            <option value="en">English</option>
            <option value="es">Español</option>
            <option value="fr">Français</option>
            <option value="de">Deutsch</option>
        </select>
    </div>
    
    <!-- Selettore modalità -->
    <div class="mode-selector" role="navigation" aria-label="Selettore modalità">
        <button id="basicModeBtn" class="mode-btn active" aria-pressed="true" aria-label="Modalità base">Base</button>
        <button id="advancedModeBtn" class="mode-btn" aria-pressed="false" aria-label="Modalità avanzata">Avanzata</button>
        <button id="simulationModeBtn" class="mode-btn" aria-pressed="false" aria-label="Modalità simulazione">Simulazione</button>
        <button id="historyModeBtn" class="mode-btn" aria-pressed="false" aria-label="Modalità storia">Storia</button>
    </div>
    
    <!-- Contenitori per le diverse modalità -->
    <div id="basicModeSection" style="display: block;">
        <div class="grid-container">
        <!-- Colonna Sinistra - Input -->
        <div class="input-column">
            <h2>Impostazioni Torneo</h2>
            
            <div class="input-group">
                <label>Partecipanti (min 8):
                    <span class="tooltip">ℹ️
                        <span class="tooltiptext">Inserisci il numero totale di partecipanti al torneo. Minimo 8 giocatori.</span>
                    </span>
                </label>
                <input type="number" id="participants" min="8" value="8">
            </div>
            
            <div class="input-group">
                <label>Quota partecipativa (€):
                    <span class="tooltip">ℹ️
                        <span class="tooltiptext">Importo che ogni partecipante deve pagare per iscriversi al torneo.</span>
                    </span>
                </label>
                <input type="number" id="fee" value="15" step="0.01">
            </div>

            <div class="input-group">
                <label>Costo bustina (€):
                    <span class="tooltip">ℹ️
                        <span class="tooltiptext">Prezzo di acquisto di una singola bustina di carte. Questo valore influisce sul costo totale e sul profitto.</span>
                    </span>
                </label>
                <input type="number" id="boosterPrice" value="4.25" step="0.01" min="0.01" required aria-required="true">
                <div class="validation-message" id="boosterPriceValidation">Inserisci un prezzo valido maggiore di zero</div>
            </div>

            <div class="input-group checkbox-group">
                <input type="checkbox" id="includeParticipationBoosters" checked>
                <label for="includeParticipationBoosters">Assegna una bustina a ogni partecipante
                    <span class="tooltip">ℹ️
                        <span class="tooltiptext">Se selezionato, ogni partecipante riceverà una bustina come premio di partecipazione.</span>
                    </span>
                </label>
            </div>
            
            <div class="input-group checkbox-group">
                <input type="checkbox" id="showProfit" checked>
                <label for="showProfit">Mostra profitto/perdita nel riepilogo
                    <span class="tooltip">ℹ️
                        <span class="tooltiptext">Mostra o nasconde la riga del profitto/perdita nel riepilogo finanziario.</span>
                    </span>
                </label>
            </div>
            
            <div class="input-group checkbox-group">
                <input type="checkbox" id="showTargetProfit" checked>
                <label for="showTargetProfit">Mostra campo profitto desiderato
                    <span class="tooltip">ℹ️
                        <span class="tooltiptext">Mostra o nasconde il campo per impostare il profitto desiderato.</span>
                    </span>
                </label>
            </div>
            
            <div class="input-group advanced-input" id="targetProfitContainer">
                <label class="advanced-label">Profitto desiderato (€):
                    <span class="tooltip">ℹ️
                        <span class="tooltiptext">Imposta il profitto che desideri ottenere dal torneo. Influisce sul suggerimento per il valore delle carte rare.</span>
                    </span>
                </label>
                <input type="number" id="targetProfit" class="advanced-number-input" value="120" step="0.01" min="0">
                <div class="validation-message" id="targetProfitValidation">Inserisci un valore valido maggiore o uguale a zero</div>
            </div>
            
            <div class="input-group advanced-input">
                <label class="advanced-label">Premi Carte rare (€):
                    <span class="tooltip">ℹ️
                        <span class="tooltiptext">Valore totale delle carte rare da distribuire come premi ai primi 3 classificati.</span>
                    </span>
                </label>
                <input type="number" id="rareCards" class="advanced-number-input" value="250" step="0.01">
                <span class="suggestion" id="rareCardsSuggestion"></span>
            </div>

            <div class="boosters-config advanced-prize-section" style="margin-bottom: 20px;">
                <h4 class="advanced-subtitle">Percentuali Distribuzione Premi:
                    <span class="tooltip">ℹ️
                        <span class="tooltiptext">Definisci come distribuire il valore delle carte rare tra i primi tre classificati.</span>
                    </span>
                </h4>
                <div class="input-group advanced-input">
                    <label class="advanced-label">1° posto (%):</label>
                    <input type="number" id="position1Percent" class="advanced-number-input" min="1" max="100" value="60" required aria-required="true">
                </div>
                <div class="input-group advanced-input">
                    <label class="advanced-label">2° posto (%):</label>
                    <input type="number" id="position2Percent" class="advanced-number-input" min="1" max="100" value="30" required aria-required="true">
                </div>
                <div class="input-group advanced-input">
                    <label class="advanced-label">3° posto (%):</label>
                    <input type="number" id="position3Percent" class="advanced-number-input" min="1" max="100" value="10" required aria-required="true">
                </div>
                <div class="suggestion" style="margin-top: 10px; text-align: center; font-weight: 600; color: #2E62A3; padding: 8px; background-color: rgba(46, 98, 163, 0.05); border-radius: 6px;">
                    La somma delle percentuali deve essere 100%
                </div>
            </div>

            <div class="boosters-config advanced-prize-section">
                <h4 class="advanced-subtitle">Bustine Extra:
                    <span class="tooltip">ℹ️
                        <span class="tooltiptext">Definisci quante bustine extra assegnare ai classificati dal 4° all'8° posto.</span>
                    </span>
                </h4>
                <div class="input-group advanced-input">
                    <label class="advanced-label">4° posto:</label>
                    <input type="number" id="position4Boosters" class="advanced-number-input" min="0" max="10" value="2">
                </div>
                <div class="input-group advanced-input">
                    <label class="advanced-label">5° posto:</label>
                    <input type="number" id="position5Boosters" class="advanced-number-input" min="0" max="10" value="1">
                </div>
                <div class="input-group advanced-input">
                    <label class="advanced-label">6° posto:</label>
                    <input type="number" id="position6Boosters" class="advanced-number-input" min="0" max="10" value="1">
                </div>
                <div class="input-group advanced-input">
                    <label class="advanced-label">7° posto:</label>
                    <input type="number" id="position7Boosters" class="advanced-number-input" min="0" max="10" value="1">
                </div>
                <div class="input-group advanced-input">
                    <label class="advanced-label">8° posto:</label>
                    <input type="number" id="position8Boosters" class="advanced-number-input" min="0" max="10" value="1">
                </div>
            </div>

            <button onclick="calculate()" class="pirate-button advanced-button">
                <span class="button-icon">⚓</span> Calcola Montepremi <span class="button-icon">⚓</span>
            </button>
            
            <div class="advanced-button-group">
                <button onclick="saveConfiguration()" class="export-button advanced-action-button" style="flex: 1; min-width: 120px;">
                    💾 Salva configurazione
                </button>
                <button onclick="loadConfiguration()" class="export-button advanced-action-button" style="flex: 1; min-width: 120px;">
                    📂 Carica configurazione
                </button>
                <button onclick="openShareModal()" class="export-button advanced-action-button" style="flex: 1; min-width: 120px;">
                    🔗 Condividi
                </button>
            </div>
            
            <button onclick="resetToDefaults()" class="export-button reset-button advanced-reset-button" style="margin-top: 10px;">
                🔄 Reimposta valori predefiniti
            </button>
            
            <div class="validation-message" id="percentValidation">La somma delle percentuali deve essere 100%</div>
        </div>

        <!-- Colonna Centrale - Premi -->
        <div class="prize-column">
            <h2>Distribuzione Premi</h2>
            <div class="highlight">
                <h3>Montepremi Totale:</h3>
                <div style="font-size: 1.5em; text-align: center; margin: 15px 0;">
                    € <span id="totalPrizePool">-</span>
                </div>
            </div>
            
            <!-- Grafico distribuzione premi -->
            <div class="chart-container" role="img" aria-label="Grafico distribuzione premi">
                <canvas id="prizeDistributionChart"></canvas>
            </div>
            
            <!-- Controlli per personalizzare le percentuali -->
            <div class="prize-distribution-controls" role="region" aria-label="Personalizzazione percentuali premio">
                <h3>Personalizza Percentuali <button id="resetPercentages" class="small-btn" aria-label="Ripristina percentuali predefinite">Ripristina</button></h3>
                <div class="slider-container">
                    <label for="position1Slider">1° posto: <span id="position1SliderValue">60</span>%</label>
                    <input type="range" id="position1Slider" min="10" max="90" value="60" class="prize-slider" aria-valuemin="10" aria-valuemax="90" aria-valuenow="60" aria-label="Percentuale premio primo posto">
                </div>
                <div class="slider-container">
                    <label for="position2Slider">2° posto: <span id="position2SliderValue">30</span>%</label>
                    <input type="range" id="position2Slider" min="5" max="60" value="30" class="prize-slider" aria-valuemin="5" aria-valuemax="60" aria-valuenow="30" aria-label="Percentuale premio secondo posto">
                </div>
                <div class="slider-container">
                    <label for="position3Slider">3° posto: <span id="position3SliderValue">10</span>%</label>
                    <input type="range" id="position3Slider" min="5" max="40" value="10" class="prize-slider" aria-valuemin="5" aria-valuemax="40" aria-valuenow="10" aria-label="Percentuale premio terzo posto">
                </div>
                <div class="validation-message" id="sliderPercentValidation"></div>
                <div class="total-percentage">Totale: <span id="totalPercentage">100</span>% <span id="percentageStatus">✅</span></div>
            </div>

            <table class="prize-table" role="table" aria-label="Tabella distribuzione premi">
                <tr>
                    <th scope="col"><span class="table-icon" aria-hidden="true">🏆</span> Posizione</th>
                    <th scope="col"><span class="table-icon" aria-hidden="true">🎁</span> Premio</th>
                    <th scope="col"><span class="table-icon" aria-hidden="true">💎</span> Valore</th>
                </tr>
                <tr class="gold-position"><td>1°</td><td id="prize1Label">Carte rare (60%)</td><td id="prize1">-</td></tr>
                <tr class="silver-position"><td>2°</td><td id="prize2Label">Carte rare (30%)</td><td id="prize2">-</td></tr>
                <tr class="bronze-position"><td>3°</td><td id="prize3Label">Carte rare (10%)</td><td id="prize3">-</td></tr>
                <tr><td>4°</td><td id="prize4Label">2 bustine</td><td id="prize4">-</td></tr>
                <tr><td>5°</td><td id="prize5Label">1 bustina</td><td id="prize5">-</td></tr>
                <tr><td>6°</td><td id="prize6Label">1 bustina</td><td id="prize6">-</td></tr>
                <tr><td>7°</td><td id="prize7Label">1 bustina</td><td id="prize7">-</td></tr>
                <tr><td>8°</td><td id="prize8Label">1 bustina</td><td id="prize8">-</td></tr>
            </table>
        </div>

        <!-- Colonna Destra - Economia -->
        <div class="finance-column">
            <h2>Economia Torneo</h2>
            
            <table class="highlight finance-table">
                <tr><th colspan="2"><span class="table-icon">💰</span> Riepilogo Finanziario</th></tr>
                <tr><td><span class="table-icon">💵</span> Incassi totali</td><td id="revenue">-</td></tr>
                <tr><td><span class="table-icon">🃏</span> Costo bustine</td><td id="totalBoostersCost">-</td></tr>
                <tr><td><span class="table-icon">✨</span> Premi carte rare</td><td id="rareCardsCost">-</td></tr>
                <tr class="total-row"><td><strong>Totale costi</strong></td><td id="totalCost">-</td></tr>
                <tr class="profit-row"><td><strong>Profitto/Perdita</strong></td><td id="profit">-</td></tr>
            </table>

            <div class="highlight cost-detail" style="margin-top: 20px;">
                <h3>Dettaglio Costi</h3>
                <div class="cost-item">Bustine partecipazione: €<span id="participationBoostersCost">-</span></div>
                <div class="cost-item">Bustine premi extra: €<span id="extraBoostersCost">-</span></div>
            </div>
            
            <div class="export-buttons no-print">
                <button class="export-button print-btn" onclick="window.print()">Stampa</button>
                <button class="export-button pdf-btn" onclick="exportToPDF()">Esporta PDF</button>
            </div>
            
            <div class="highlight" style="margin-top: 20px;">
                <h3>Statistiche Torneo</h3>
                <div>Costo medio per partecipante: €<span id="averageCostPerPlayer">-</span></div>
                <div>Percentuale profitto: <span id="profitPercentage">-</span></div>
                <div>Rapporto premi/iscrizione: <span id="prizeToFeeRatio">-</span></div>
                <div>Valore totale premi: €<span id="totalPrizeValue">-</span></div>
                <div>Efficienza costi: <span id="costEfficiency">-</span></div>
            </div>
        </div>
    </div>
    </div>
    
    <!-- Modalità Avanzata -->
    <div id="advancedModeSection" style="display: none;" aria-labelledby="advancedModeTitle" role="region">
        <div class="grid-container">
            <div class="input-column">
                <h2 id="advancedModeTitle" class="section-title">Impostazioni Torneo Avanzate</h2>
                
                <div class="input-group advanced-input">
                    <label for="tournamentFormat" class="advanced-label">Formato Torneo:</label>
                    <select id="tournamentFormat" class="select-input advanced-select" aria-describedby="formatHint">
                        <option value="elimination">Eliminazione Diretta</option>
                        <option value="swiss">Svizzera</option>
                        <option value="roundRobin">Girone all'italiana</option>
                    </select>
                    <span id="formatHint" class="suggestion">Il formato influisce sul numero di round e sulla struttura del torneo</span>
                </div>
                
                <div class="input-group advanced-input">
                    <label for="advancedParticipants" class="advanced-label">Numero di partecipanti:</label>
                    <input type="number" id="advancedParticipants" class="advanced-number-input" min="4" max="256" value="32" aria-describedby="participantsHint">
                    <span id="participantsHint" class="suggestion">Determina il numero di round e la struttura del torneo</span>
                </div>
                
                <div class="input-group advanced-input">
                    <label for="advancedFee" class="advanced-label">Quota iscrizione (€):</label>
                    <input type="number" id="advancedFee" class="advanced-number-input" min="1" value="15" step="0.01" aria-label="Quota iscrizione in euro">
                </div>
                
                <div class="input-group advanced-input">
                    <label for="advancedBoosterPrice" class="advanced-label">Costo bustina (€):</label>
                    <input type="number" id="advancedBoosterPrice" class="advanced-number-input" min="0.01" value="4.25" step="0.01" aria-label="Costo bustina in euro">
                </div>
                
                <div class="input-group advanced-input">
                    <label for="tournamentRounds" class="advanced-label">Numero di Round:</label>
                    <input type="number" id="tournamentRounds" class="advanced-number-input" min="3" value="4" aria-describedby="roundsHint">
                    <span id="roundsHint" class="suggestion">Verrà calcolato automaticamente in base al formato e ai partecipanti</span>
                </div>
                
                <div id="roundsContainer" class="input-group advanced-input">
                    <label for="roundDuration" class="advanced-label">Durata Round (minuti):</label>
                    <input type="number" id="roundDuration" class="advanced-number-input" min="20" value="40" aria-describedby="durationHint">
                    <span id="durationHint" class="suggestion">Influisce sulla durata totale del torneo</span>
                </div>
                
                <div class="input-group checkbox-group advanced-checkbox">
                    <input type="checkbox" id="customPrizes" checked aria-controls="customPrizesContainer">
                    <label for="customPrizes" class="checkbox-label">Premi personalizzati</label>
                </div>
                
                <div id="customPrizesContainer" class="prize-section advanced-prize-section">
                    <h3 id="customPrizesTitle" class="advanced-subtitle">Premi Personalizzati</h3>
                    <div class="table-responsive advanced-table-container">
                        <table id="customPrizesTable" class="prize-table advanced-table" aria-labelledby="customPrizesTitle">
                            <caption class="sr-only">Tabella dei premi personalizzati per posizione</caption>
                            <thead>
                                <tr>
                                    <th scope="col">Posizione</th>
                                    <th scope="col">Carte Rare (€)</th>
                                    <th scope="col">Bustine</th>
                                    <th scope="col">Premio Extra</th>
                                    <th scope="col">Valore Totale</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Righe generate dinamicamente -->
                            </tbody>
                            <tfoot>
                                <tr>
                                    <th scope="row" colspan="4"><strong>Totale</strong></th>
                                    <td id="advancedTotalPrizeCost" class="total-value" aria-live="polite">€0.00</td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>
            </div>
            
            <div class="prize-column">
                <h2 id="statsTitle" class="section-title">Statistiche Torneo</h2>
                
                <div class="highlight advanced-highlight">
                    <h3 id="summaryTitle" class="advanced-subtitle">Riepilogo Torneo</h3>
                    <dl class="stats-list advanced-stats">
                        <dt>Montepremi totale:</dt>
                        <dd id="advancedPrizePool" class="stat-value" aria-live="polite">€0.00</dd>
                        <dt>Numero di partite:</dt>
                        <dd id="advancedMatches" class="stat-value" aria-live="polite">0</dd>
                        <dt>Durata stimata:</dt>
                        <dd id="advancedDuration" class="stat-value" aria-live="polite">0 ore</dd>
                    </dl>
                </div>
                
                <div class="chart-container advanced-chart" role="img" aria-labelledby="chartTitle">
                    <h4 id="chartTitle" class="sr-only">Grafico distribuzione premi</h4>
                    <canvas id="advancedPrizeChart"></canvas>
                </div>
                
                <div class="highlight advanced-highlight">
                    <h3 id="metricsTitle" class="advanced-subtitle">Metriche Finanziarie</h3>
                    <dl class="stats-list advanced-stats">
                        <dt>Profitto:</dt>
                        <dd id="advancedProfit" class="stat-value" aria-live="polite">€0.00</dd>
                        <dt>Percentuale profitto:</dt>
                        <dd id="advancedProfitPercentage" class="stat-value" aria-live="polite">0%</dd>
                        <dt>Rapporto premi/iscrizione:</dt>
                        <dd id="advancedPrizeRatio" class="stat-value" aria-live="polite">0%</dd>
                    </dl>
                </div>
            </div>
            
            <div class="finance-column">
                <h2 id="optionsTitle" class="section-title">Opzioni Avanzate</h2>
                
                <div class="input-group advanced-input">
                    <label for="locationCost" class="advanced-label">Costo location (€):</label>
                    <input type="number" id="locationCost" class="advanced-number-input" min="0" value="0" step="0.01" aria-label="Costo location in euro">
                </div>
                
                <div class="input-group advanced-input">
                    <label for="judgeCost" class="advanced-label">Costo arbitri (€):</label>
                    <input type="number" id="judgeCost" class="advanced-number-input" min="0" value="0" step="0.01" aria-label="Costo arbitri in euro">
                </div>
                
                <div class="input-group">
                    <label for="otherCosts">Altri costi (€):</label>
                    <input type="number" id="otherCosts" min="0" value="0" step="0.01" aria-label="Altri costi in euro">
                </div>
                
                <button onclick="calculateAdvanced()" class="pirate-button" id="calculateAdvancedBtn" aria-label="Calcola torneo con impostazioni avanzate">
                    <span class="button-icon" aria-hidden="true">⚓</span> Calcola Torneo Avanzato <span class="button-icon" aria-hidden="true">⚓</span>
                </button>
                
                <button id="saveAdvancedConfig" class="export-button" style="margin-top: 15px;" aria-label="Salva configurazione avanzata">
                    <span aria-hidden="true">💾</span> Salva Configurazione Avanzata
                </button>
            </div>
        </div>
    </div>
    
    <!-- Modalità Simulazione -->
    <div id="simulationModeSection" style="display: none;" aria-labelledby="simulationModeTitle" role="region">
        <div class="grid-container">
            <div class="input-column">
                <h2 id="simulationModeTitle">Parametri Simulazione</h2>
                
                <form id="simulationForm">
                    <div class="input-group">
                        <label for="baseParticipants">Partecipanti base:</label>
                        <input type="number" id="baseParticipants" min="8" value="8" aria-label="Numero minimo di partecipanti per la simulazione">
                    </div>
                    
                    <div class="input-group">
                        <label for="maxParticipants">Partecipanti massimi:</label>
                        <input type="number" id="maxParticipants" min="8" value="32" aria-label="Numero massimo di partecipanti per la simulazione">
                    </div>
                    
                    <div class="input-group">
                        <label for="participantsStep">Incremento partecipanti:</label>
                        <input type="number" id="participantsStep" min="1" value="4" aria-label="Incremento del numero di partecipanti tra simulazioni">
                    </div>
                    
                    <div class="input-group">
                        <label id="feeRangeLabel">Range Quota (€):</label>
                        <div style="display: flex; align-items: center; gap: 10px;" role="group" aria-labelledby="feeRangeLabel">
                            <input type="number" id="baseFee" min="1" value="15" step="0.5" style="width: 45%" aria-label="Quota minima in euro">
                            <span aria-hidden="true">a</span>
                            <input type="number" id="maxFee" min="1" value="25" step="0.5" style="width: 45%" aria-label="Quota massima in euro">
                        </div>
                    </div>
                    
                    <div class="input-group">
                        <label for="feeStep">Incremento quota (€):</label>
                        <input type="number" id="feeStep" min="0.5" value="2.5" step="0.5" aria-label="Incremento della quota tra simulazioni">
                    </div>
                    
                    <div class="input-group">
                        <label for="simulationBoosterPrice">Costo bustina (€):</label>
                        <input type="number" id="simulationBoosterPrice" min="0.01" value="4.25" step="0.01" aria-label="Costo bustina in euro per la simulazione">
                    </div>
                    
                    <div class="input-group">
                        <label for="simulationRareCards">Valore carte rare (€):</label>
                        <input type="number" id="simulationRareCards" min="50" value="250" step="10" aria-label="Valore totale delle carte rare in euro">
                    </div>
                </form>
                
                <button id="runSimulation" class="export-button" aria-label="Avvia la simulazione con i parametri impostati">Esegui Simulazione</button>
            </div>
            
            <div class="prize-column">
                <h2 id="simulationResultsTitle">Risultati Simulazione</h2>
                
                <div class="chart-container" role="img" aria-labelledby="simulationChartTitle">
                    <h4 id="simulationChartTitle" class="sr-only">Grafico risultati simulazione</h4>
                    <canvas id="simulationChart"></canvas>
                </div>
                
                <div class="highlight">
                    <h3 id="simulationTableTitle">Risultati Simulazione</h3>
                    <div class="table-responsive">
                        <table id="simulationResults" class="simulation-table" aria-labelledby="simulationTableTitle">
                            <caption class="sr-only">Tabella dei risultati della simulazione per diverse configurazioni</caption>
                            <thead>
                                <tr>
                                    <th scope="col">Partecipanti</th>
                                    <th scope="col">Quota (€)</th>
                                    <th scope="col">Montepremi (€)</th>
                                    <th scope="col">Profitto (€)</th>
                                    <th scope="col">% Profitto</th>
                                    <th scope="col">% Efficienza</th>
                                    <th scope="col">Azioni</th>
                                </tr>
                            </thead>
                            <tbody id="simulationResultsBody">
                                <!-- I risultati verranno inseriti qui -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            
            <div class="finance-column">
                <h2>Grafici Comparativi</h2>
                
                <div class="chart-container">
                    <canvas id="comparisonChart"></canvas>
                </div>
                
                <div class="highlight">
                    <h3>Raccomandazione</h3>
                    <p id="simulationRecommendation">Esegui una simulazione per ricevere raccomandazioni.</p>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Modalità Storia Tornei -->
    <div id="historyModeSection" style="display: none;" aria-labelledby="historyModeTitle" role="region">
        <div class="grid-container">
            <div class="input-column">
                <h2 id="historyModeTitle">Archivio Tornei</h2>
                
                <form id="tournamentForm" aria-label="Form inserimento dati torneo">
                    <div class="input-group">
                        <label for="tournamentName">Nome Torneo:</label>
                        <input type="text" id="tournamentName" placeholder="Inserisci nome torneo..." aria-required="true">
                    </div>
                    
                    <div class="input-group">
                        <label for="tournamentDate">Data:</label>
                        <input type="date" id="tournamentDate" aria-label="Data del torneo">
                    </div>
                    
                    <div class="input-group">
                        <label for="tournamentLocation">Luogo:</label>
                        <input type="text" id="tournamentLocation" placeholder="Inserisci luogo torneo..." aria-label="Luogo del torneo">
                    </div>
                    
                    <div class="input-group">
                        <label for="historyParticipants">Partecipanti:</label>
                        <input type="number" id="historyParticipants" min="1" placeholder="Numero partecipanti..." aria-label="Numero di partecipanti">
                    </div>
                    
                    <div class="input-group">
                        <label for="historyFee">Quota d'iscrizione (€):</label>
                        <input type="number" id="historyFee" min="0" step="0.5" placeholder="Quota d'iscrizione..." aria-label="Quota d'iscrizione in euro">
                    </div>
                    
                    <div class="input-group">
                        <label for="historyExpenses">Spese totali (€):</label>
                        <input type="number" id="historyExpenses" min="0" step="0.5" placeholder="Spese totali..." aria-label="Spese totali in euro">
                    </div>
                    
                    <div class="input-group">
                        <label for="tournamentNotes">Note:</label>
                        <textarea id="tournamentNotes" placeholder="Inserisci note sul torneo..." aria-label="Note aggiuntive sul torneo"></textarea>
                    </div>
                </form>
                
                <div class="input-group">
                    <button id="saveTournament" class="export-button" aria-label="Salva i dati del torneo corrente">Salva Torneo Corrente</button>
                </div>
                
                <div class="highlight">
                    <h3 id="savedTournamentsTitle">Tornei Salvati</h3>
                    <div id="historyStats" class="history-stats" aria-live="polite">
                        <p>Nessun torneo salvato.</p>
                    </div>
                    
                    <div class="table-responsive">
                        <table id="tournamentHistoryTable" class="simulation-table" aria-labelledby="savedTournamentsTitle">
                            <caption class="sr-only">Elenco dei tornei salvati con relativi dettagli</caption>
                            <thead>
                                <tr>
                                    <th scope="col">Nome</th>
                                    <th scope="col">Data</th>
                                    <th scope="col">Luogo</th>
                                    <th scope="col">Partecipanti</th>
                                    <th scope="col">Quota (€)</th>
                                    <th scope="col">Montepremi (€)</th>
                                    <th scope="col">Profitto (€)</th>
                                    <th scope="col">Azioni</th>
                                </tr>
                            </thead>
                            <tbody id="historyTableBody">
                                <!-- I tornei salvati verranno inseriti qui -->
                            </tbody>
                        </table>
                    </div>

                </div>
                
                <div class="input-group button-group">
                    <button id="exportHistory" class="export-button" aria-label="Esporta l'archivio dei tornei">Esporta Archivio</button>
                    <button id="importHistory" class="export-button" style="margin-top: 10px;" aria-label="Importa un archivio di tornei">Importa Archivio</button>
                </div>
            </div>
            
            <div class="prize-column">
                <h2 id="historyTrendTitle">Andamento Storico</h2>
                
                <div class="chart-container" role="img" aria-labelledby="historyChartTitle">
                    <h4 id="historyChartTitle" class="sr-only">Grafico andamento storico tornei</h4>
                    <canvas id="historyChart"></canvas>
                </div>
                
                <div id="tournamentDetails" class="highlight" aria-live="polite">
                    <h3 id="tournamentDetailsTitle">Dettagli Torneo</h3>
                    <p>Seleziona un torneo dall'archivio per visualizzare i dettagli.</p>
                </div>
                
                <div class="tournament-metrics" style="display: none;" aria-labelledby="metricsTitle">
                    <h3 id="metricsTitle">Metriche Chiave</h3>
                    <table id="tournamentMetricsTable" class="metrics-table">
                        <caption class="sr-only">Metriche dettagliate del torneo selezionato</caption>
                        <tbody>
                            <tr>
                                <th scope="row">Partecipanti:</th>
                                <td id="detailParticipants" aria-live="polite">-</td>
                            </tr>
                            <tr>
                                <th scope="row">Quota iscrizione:</th>
                                <td id="detailFee" aria-live="polite">-</td>
                            </tr>
                            <tr>
                                <th scope="row">Entrate totali:</th>
                                <td id="detailIncome" aria-live="polite">-</td>
                            </tr>
                            <tr>
                                <th scope="row">Valore premi:</th>
                                <td id="detailPrizes" aria-live="polite">-</td>
                            </tr>
                            <tr>
                                <th scope="row">Profitto:</th>
                                <td id="detailProfit" aria-live="polite">-</td>
                            </tr>
                            <tr>
                                <th scope="row">Efficienza costi:</th>
                                <td id="detailEfficiency" aria-live="polite">-</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                
                <div class="input-group button-group" style="margin-top: 20px; display: none;" id="tournamentActions">
                    <button id="duplicateTournament" class="small-btn" aria-label="Duplica la configurazione del torneo selezionato">Duplica Configurazione</button>
                    <button id="deleteTournament" class="small-btn" style="background-color: #D70000;" aria-label="Elimina il torneo selezionato">Elimina Torneo</button>
                </div>
            </div>
            
            <div class="finance-column">
                <h2 id="historyStatsTitle">Statistiche Storiche</h2>
                
                <div class="input-group">
                    <label for="historyMetric">Metrica da visualizzare:</label>
                    <select id="historyMetric" class="select-input" aria-label="Seleziona la metrica da visualizzare nel grafico">
                        <option value="participants">Numero partecipanti</option>
                        <option value="income">Entrate totali</option>
                        <option value="prizes">Valore premi</option>
                        <option value="profit">Profitto</option>
                        <option value="efficiency">Efficienza costi</option>
                    </select>
                </div>
                
                <div class="chart-container" role="img" aria-labelledby="statsChartTitle">
                    <h4 id="statsChartTitle" class="sr-only">Grafico statistiche storiche</h4>
                    <canvas id="historyChart"></canvas>
                </div>
                
                <div class="highlight">
                    <h3 id="trendTitle">Trend e Analisi</h3>
                    <div id="trendAnalysis" aria-live="polite">
                        <p>Le statistiche comparative saranno disponibili quando avrai salvato almeno due tornei.</p>
                    </div>
                </div>
                
                <div class="input-group">
                    <label for="analysisPeriod">Periodo di analisi:</label>
                    <select id="analysisPeriod" class="select-input" aria-label="Seleziona il periodo di analisi">
                        <option value="all">Tutti i tornei</option>
                        <option value="last6">Ultimi 6 mesi</option>
                        <option value="last12">Ultimo anno</option>
                    </select>
                </div>
                
                <div class="highlight">
                    <h3 id="aggregateTitle">Statistiche Aggregate</h3>
                    <div id="aggregateStats" aria-live="polite">
                        <p>Totale tornei: <span id="totalTournaments">0</span></p>
                        <p>Media partecipanti: <span id="avgParticipants">0</span></p>
                        <p>Profitto totale: <span id="totalProfit">€0.00</span></p>
                        <p>Torneo più redditizio: <span id="mostProfitableTournament">-</span></p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Modal di condivisione -->
    <div id="shareModal" class="modal">
        <div class="modal-content">
            <span class="close-modal" onclick="closeShareModal()">&times;</span>
            <h3>Condividi Configurazione</h3>
            <p>Copia questo codice e condividilo con altri organizzatori:</p>
            <textarea id="shareCode" class="share-code" readonly></textarea>
            <button onclick="copyShareCode()" class="copy-btn">Copia codice</button>
            <div style="margin-top: 15px;">
                <h4>Importa configurazione</h4>
                <p>Incolla qui un codice di configurazione:</p>
                <textarea id="importCode" class="share-code" placeholder="Incolla qui il codice di configurazione..."></textarea>
                <button onclick="importConfiguration()" class="copy-btn">Importa</button>
            </div>
        </div>
    </div>
    
    <footer class="footer no-print">
        <p>Calcolatore Torneo One Piece v2.0 | Creato per gli organizzatori di tornei</p>
        <p>Ottimizzato per calcolare montepremi, costi e distribuzione premi</p>
    </footer>

    <script>
        // Versione del calcolatore
        const VERSION = "3.0";
        
        // Variabili per i grafici
        let prizeDistributionChart = null;
        let simulationChart = null;
        let comparisonChart = null;
        let historyChart = null;
        
        // Array per memorizzare i tornei salvati
        let savedTournaments = [];
        
        // Array per memorizzare i risultati delle simulazioni
        let simulationResults = [];
        
        // Funzione per gestire il tema chiaro/scuro
        function toggleTheme() {
            const body = document.body;
            const themeToggle = document.getElementById('themeToggle');
            
            if (body.classList.contains('dark-mode')) {
                body.classList.remove('dark-mode');
                themeToggle.textContent = '☀️';
                localStorage.setItem('theme', 'light');
            } else {
                body.classList.add('dark-mode');
                themeToggle.textContent = '🌙';
                localStorage.setItem('theme', 'dark');
            }
        }
        
        // Funzione per gestire la visibilità della riga profitto/perdita
        function toggleProfitVisibility() {
            const profitRow = document.getElementById('profit').parentElement.parentElement;
            const showProfit = document.getElementById('showProfit').checked;
            profitRow.style.display = showProfit ? '' : 'none';
        }
        
        // Funzione per gestire la visibilità del campo profitto desiderato
        function toggleTargetProfitVisibility() {
            const targetProfitContainer = document.getElementById('targetProfitContainer');
            const showTargetProfit = document.getElementById('showTargetProfit').checked;
            targetProfitContainer.style.display = showTargetProfit ? '' : 'none';
        }
        
        // Funzione per esportare in PDF
        function exportToPDF() {
            // Configurazione per html2pdf
            const element = document.body;
            const opt = {
                margin: 10,
                filename: 'Calcolatore_Torneo_OnePiece.pdf',
                image: { type: 'jpeg', quality: 0.98 },
                html2canvas: { scale: 2, useCORS: true },
                jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' }
            };
            
            // Nascondi temporaneamente i pulsanti di esportazione
            const exportButtons = document.querySelectorAll('.export-buttons');
            exportButtons.forEach(btn => btn.style.display = 'none');
            
            // Genera il PDF
            html2pdf().set(opt).from(element).save().then(() => {
                // Ripristina i pulsanti dopo la generazione
                exportButtons.forEach(btn => btn.style.display = 'flex');
            });
        }
        
        // Funzione per aggiungere event listeners a tutti gli input
        function setupAutoCalculate() {
            // Lista di tutti gli elementi input che influenzano il calcolo
            const inputs = [
                'participants', 'fee', 'boosterPrice', 'rareCards', 'targetProfit',
                'position1Percent', 'position2Percent', 'position3Percent',
                'position4Boosters', 'position5Boosters', 'position6Boosters',
                'position7Boosters', 'position8Boosters', 'includeParticipationBoosters'
            ];
            
            // Aggiungi event listener a ciascun input
            inputs.forEach(id => {
                const element = document.getElementById(id);
                if (element) {
                    if (element.type === 'checkbox') {
                        element.addEventListener('change', calculate);
                    } else {
                        element.addEventListener('input', calculate);
                        
                        // Aggiungi validazione per i campi numerici
                        if (element.type === 'number') {
                            element.addEventListener('input', validateInput);
                        }
                    }
                }
            });
            
            // Validazione speciale per le percentuali
            document.getElementById('position1Percent').addEventListener('input', validatePercentages);
            document.getElementById('position2Percent').addEventListener('input', validatePercentages);
            document.getElementById('position3Percent').addEventListener('input', validatePercentages);
            
            // Setup per gli slider di personalizzazione
            setupPrizeSliders();
            
            // Setup per i pulsanti di modalità
            setupModeSwitcher();
        }
        
        // Funzione per inizializzare gli slider di personalizzazione
        function setupPrizeSliders() {
            const position1Slider = document.getElementById('position1Slider');
            const position2Slider = document.getElementById('position2Slider');
            const position3Slider = document.getElementById('position3Slider');
            const position1Value = document.getElementById('position1SliderValue');
            const position2Value = document.getElementById('position2SliderValue');
            const position3Value = document.getElementById('position3SliderValue');
            const totalPercentage = document.getElementById('totalPercentage');
            const percentageStatus = document.getElementById('percentageStatus');
            const resetButton = document.getElementById('resetPercentages');
            
            // Funzione per aggiornare i valori degli input numerici dalle slider
            function updateInputsFromSliders() {
                document.getElementById('position1Percent').value = position1Slider.value;
                document.getElementById('position2Percent').value = position2Slider.value;
                document.getElementById('position3Percent').value = position3Slider.value;
                validatePercentages();
                calculate();
                updatePrizeDistributionChart();
            }
            
            // Funzione per aggiornare i valori visualizzati
            function updateSliderValues() {
                position1Value.textContent = position1Slider.value;
                position2Value.textContent = position2Slider.value;
                position3Value.textContent = position3Slider.value;
                
                const total = parseInt(position1Slider.value) + parseInt(position2Slider.value) + parseInt(position3Slider.value);
                totalPercentage.textContent = total;
                
                if (total === 100) {
                    percentageStatus.textContent = '✅';
                    document.getElementById('sliderPercentValidation').style.display = 'none';
                } else {
                    percentageStatus.textContent = '❌';
                    const validationMessage = document.getElementById('sliderPercentValidation');
                    validationMessage.textContent = `La somma attuale è ${total}%. Deve essere 100%.`;
                    validationMessage.style.display = 'block';
                }
            }
            
            // Aggiungi event listeners agli slider
            position1Slider.addEventListener('input', function() {
                updateSliderValues();
                // Aggiusta gli altri slider per mantenere il totale a 100%
                const remaining = 100 - parseInt(position1Slider.value);
                const ratio = parseInt(position2Slider.value) / (parseInt(position2Slider.value) + parseInt(position3Slider.value));
                
                if (!isNaN(ratio)) {
                    position2Slider.value = Math.round(remaining * ratio);
                    position3Slider.value = remaining - position2Slider.value;
                    updateSliderValues();
                    updateInputsFromSliders();
                }
            });
            
            position2Slider.addEventListener('input', function() {
                updateSliderValues();
                // Aggiusta il terzo slider per mantenere il totale a 100%
                const remaining = 100 - parseInt(position1Slider.value) - parseInt(position2Slider.value);
                position3Slider.value = remaining;
                updateSliderValues();
                updateInputsFromSliders();
            });
            
            position3Slider.addEventListener('input', function() {
                updateSliderValues();
                // Aggiusta il secondo slider per mantenere il totale a 100%
                const remaining = 100 - parseInt(position1Slider.value) - parseInt(position3Slider.value);
                position2Slider.value = remaining;
                updateSliderValues();
                updateInputsFromSliders();
            });
            
            // Pulsante per ripristinare i valori predefiniti
            resetButton.addEventListener('click', function() {
                position1Slider.value = 60;
                position2Slider.value = 30;
                position3Slider.value = 10;
                updateSliderValues();
                updateInputsFromSliders();
            });
            
            // Inizializza i valori
            updateSliderValues();
        }
        
        // Funzione per inizializzare e aggiornare il grafico di distribuzione premi
        function updatePrizeDistributionChart() {
            const ctx = document.getElementById('prizeDistributionChart').getContext('2d');
            
            // Ottieni i valori delle percentuali
            const position1Percent = parseInt(document.getElementById('position1Percent').value) || 60;
            const position2Percent = parseInt(document.getElementById('position2Percent').value) || 30;
            const position3Percent = parseInt(document.getElementById('position3Percent').value) || 10;
            
            // Ottieni i valori dei premi in bustine
            const position4Boosters = parseInt(document.getElementById('position4Boosters').value) || 0;
            const position5Boosters = parseInt(document.getElementById('position5Boosters').value) || 0;
            const position6Boosters = parseInt(document.getElementById('position6Boosters').value) || 0;
            const position7Boosters = parseInt(document.getElementById('position7Boosters').value) || 0;
            const position8Boosters = parseInt(document.getElementById('position8Boosters').value) || 0;
            
            // Calcola il valore totale delle carte rare
            const rareCards = parseFloat(document.getElementById('rareCards').value) || 0;
            
            // Calcola il valore delle bustine
            const boosterPrice = parseFloat(document.getElementById('boosterPrice').value) || 0;
            const boosterValues = [
                position4Boosters * boosterPrice,
                position5Boosters * boosterPrice,
                position6Boosters * boosterPrice,
                position7Boosters * boosterPrice,
                position8Boosters * boosterPrice
            ];
            
            // Calcola i valori dei premi in carte rare
            const rareCardValues = [
                rareCards * (position1Percent / 100),
                rareCards * (position2Percent / 100),
                rareCards * (position3Percent / 100)
            ];
            
            // Prepara i dati per il grafico
            const data = {
                labels: ['1° posto', '2° posto', '3° posto', '4° posto', '5° posto', '6° posto', '7° posto', '8° posto'],
                datasets: [{
                    label: 'Valore Premio (€)',
                    data: [...rareCardValues, ...boosterValues],
                    backgroundColor: [
                        '#FFCD00', // Oro per il 1° posto
                        '#C0C0C0', // Argento per il 2° posto
                        '#AF6528', // Bronzo per il 3° posto
                        '#62C3F8', // Blu per gli altri posti
                        '#62C3F8',
                        '#62C3F8',
                        '#62C3F8',
                        '#62C3F8'
                    ],
                    borderColor: '#2E62A3',
                    borderWidth: 1
                }]
            };
            
            // Opzioni del grafico
            const options = {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const value = context.raw;
                                return `€${value.toFixed(2)}`;
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Valore (€)'
                        }
                    }
                }
            };
            
            // Distruggi il grafico esistente se presente
            if (prizeDistributionChart) {
                prizeDistributionChart.destroy();
            }
            
            // Crea il nuovo grafico
            prizeDistributionChart = new Chart(ctx, {
                type: 'bar',
                data: data,
                options: options
            });
        }
        
        // Funzione per gestire il cambio di modalità
        function setupModeSwitcher() {
            const basicModeBtn = document.getElementById('basicModeBtn');
            const advancedModeBtn = document.getElementById('advancedModeBtn');
            const simulationModeBtn = document.getElementById('simulationModeBtn');
            const historyModeBtn = document.getElementById('historyModeBtn');
            
            // Funzione per attivare una modalità
            function activateMode(mode) {
                // Rimuovi la classe active da tutti i pulsanti
                [basicModeBtn, advancedModeBtn, simulationModeBtn, historyModeBtn].forEach(btn => {
                    btn.classList.remove('active');
                    btn.setAttribute('aria-pressed', 'false');
                });
                
                // Aggiungi la classe active al pulsante selezionato
                mode.classList.add('active');
                mode.setAttribute('aria-pressed', 'true');
                
                // Nascondi tutte le sezioni di modalità
                document.getElementById('basicModeSection').style.display = 'none';
                document.getElementById('advancedModeSection').style.display = 'none';
                document.getElementById('simulationModeSection').style.display = 'none';
                document.getElementById('historyModeSection').style.display = 'none';
                
                // Mostra la sezione corrispondente alla modalità selezionata
                if (mode === basicModeBtn) {
                    document.getElementById('basicModeSection').style.display = 'block';
                } else if (mode === advancedModeBtn) {
                    document.getElementById('advancedModeSection').style.display = 'block';
                    setupAdvancedMode(); // Inizializza la modalità avanzata
                } else if (mode === simulationModeBtn) {
                    document.getElementById('simulationModeSection').style.display = 'block';
                    setupSimulationMode(); // Inizializza la modalità simulazione
                } else if (mode === historyModeBtn) {
                    document.getElementById('historyModeSection').style.display = 'block';
                    setupHistoryMode(); // Inizializza la modalità storia
                }
            }
            
            // Aggiungi event listeners ai pulsanti di modalità
            basicModeBtn.addEventListener('click', function() {
                activateMode(basicModeBtn);
            });
            
            advancedModeBtn.addEventListener('click', function() {
                activateMode(advancedModeBtn);
            });
            
            simulationModeBtn.addEventListener('click', function() {
                activateMode(simulationModeBtn);
            });
            
            historyModeBtn.addEventListener('click', function() {
                activateMode(historyModeBtn);
            });
        }
        
        // Funzione per inizializzare la modalità avanzata
        function setupAdvancedMode() {
            // Ottieni gli elementi del DOM
            const tournamentFormat = document.getElementById('tournamentFormat');
            const roundsContainer = document.getElementById('roundsContainer');
            const customPrizesContainer = document.getElementById('customPrizesContainer');
            
            // Aggiorna la visualizzazione in base al formato selezionato
            function updateAdvancedView() {
                const format = tournamentFormat.value;
                
                // Mostra/nascondi opzioni specifiche per formato
                if (format === 'elimination') {
                    roundsContainer.style.display = 'block';
                    // Calcola il numero di round in base ai partecipanti
                    const participants = parseInt(document.getElementById('advancedParticipants').value) || 8;
                    const rounds = Math.ceil(Math.log2(participants));
                    document.getElementById('tournamentRounds').value = rounds;
                } else if (format === 'swiss') {
                    roundsContainer.style.display = 'block';
                    // Per il formato svizzero, suggerisci un numero di round
                    const participants = parseInt(document.getElementById('advancedParticipants').value) || 8;
                    const rounds = Math.ceil(Math.log2(participants)) + 1;
                    document.getElementById('tournamentRounds').value = rounds;
                } else if (format === 'roundRobin') {
                    roundsContainer.style.display = 'block';
                    // Per il girone all'italiana, ogni partecipante gioca contro tutti gli altri
                    const participants = parseInt(document.getElementById('advancedParticipants').value) || 8;
                    const rounds = participants - 1;
                    document.getElementById('tournamentRounds').value = rounds;
                }
                
                // Aggiorna la tabella dei premi personalizzati
                updateCustomPrizesTable();
                
                // Calcola i risultati avanzati
                calculateAdvanced();
            }
            
            // Funzione per aggiornare la tabella dei premi personalizzati
            function updateCustomPrizesTable() {
                const participants = parseInt(document.getElementById('advancedParticipants').value) || 8;
                const prizeTable = document.getElementById('customPrizesTable');
                const tbody = prizeTable.querySelector('tbody');
                
                // Svuota la tabella esistente
                tbody.innerHTML = '';
                
                // Funzione per calcolare i risultati avanzati
                function calculateAdvanced() {
                    // Ottieni i valori di input
                    const participants = parseInt(document.getElementById('advancedParticipants').value) || 8;
                    const fee = parseFloat(document.getElementById('advancedFee').value) || 15;
                    const boosterPrice = parseFloat(document.getElementById('advancedBoosterPrice').value) || 4.25;
                    const locationCost = parseFloat(document.getElementById('locationCost').value) || 0;
                    const judgeCost = parseFloat(document.getElementById('judgeCost').value) || 0;
                    const otherCosts = parseFloat(document.getElementById('otherCosts').value) || 0;
                    
                    // Calcola il montepremi totale
                    const prizePool = participants * fee;
                    
                    // Calcola i costi totali
                    let totalCosts = locationCost + judgeCost + otherCosts;
                    let totalPrizeValue = 0;
                    
                    // Calcola il valore totale dei premi
                    const maxPrizes = Math.min(participants, 8);
                    for (let i = 1; i <= maxPrizes; i++) {
                        const rareValue = parseFloat(document.getElementById(`advancedRare${i}`).value) || 0;
                        const boosters = parseInt(document.getElementById(`advancedBoosters${i}`).value) || 0;
                        const boosterValue = boosters * boosterPrice;
                        const totalValue = rareValue + boosterValue;
                        
                        document.getElementById(`advancedTotal${i}`).textContent = `€${totalValue.toFixed(2)}`;
                        totalPrizeValue += totalValue;
                    }
                    
                    // Aggiorna i risultati
                    document.getElementById('advancedPrizePool').textContent = `€${prizePool.toFixed(2)}`;
                    
                    // Calcola il numero di partite in base al formato
                    const format = document.getElementById('tournamentFormat').value;
                    const rounds = parseInt(document.getElementById('tournamentRounds').value) || 3;
                    let matches = 0;
                    
                    if (format === 'elimination') {
                        // In un torneo a eliminazione diretta, il numero di partite è n-1
                        matches = participants - 1;
                    } else if (format === 'swiss') {
                        // In un torneo svizzero, ogni giocatore gioca un numero fisso di round
                        matches = Math.floor(participants * rounds / 2);
                    } else if (format === 'roundRobin') {
                        // In un girone all'italiana, ogni giocatore gioca contro tutti gli altri
                        matches = (participants * (participants - 1)) / 2;
                    }
                    
                    document.getElementById('advancedMatches').textContent = matches;
                    
                    // Stima la durata del torneo (assumendo 45 minuti per partita)
                    const durationHours = (matches * 45) / 60;
                    document.getElementById('advancedDuration').textContent = `${durationHours.toFixed(1)} ore`;
                    
                    // Calcola il profitto
                    const profit = prizePool - totalPrizeValue - totalCosts;
                    document.getElementById('advancedProfit').textContent = `€${profit.toFixed(2)}`;
                    document.getElementById('advancedProfit').className = profit >= 0 ? 'green' : 'red';
                    
                    // Calcola la percentuale di profitto
                    const profitPercentage = (profit / prizePool) * 100;
                    document.getElementById('advancedProfitPercentage').textContent = `${profitPercentage.toFixed(2)}%`;
                    document.getElementById('advancedProfitPercentage').className = profitPercentage >= 0 ? 'green' : 'red';
                    
                    // Calcola il rapporto premi/iscrizione
                    const prizeRatio = (totalPrizeValue / prizePool) * 100;
                    document.getElementById('advancedPrizeRatio').textContent = `${prizeRatio.toFixed(2)}%`;
                    
                    // Aggiorna il grafico dei premi
                    updateAdvancedPrizeChart();
                }
                
                // Aggiungi event listener per il pulsante di calcolo
                document.getElementById('tournamentFormat').addEventListener('change', updateAdvancedView);
                document.getElementById('advancedParticipants').addEventListener('input', updateAdvancedView);
                document.getElementById('advancedFee').addEventListener('input', calculateAdvanced);
                document.getElementById('advancedBoosterPrice').addEventListener('input', calculateAdvanced);
                document.getElementById('locationCost').addEventListener('input', calculateAdvanced);
                document.getElementById('judgeCost').addEventListener('input', calculateAdvanced);
                document.getElementById('otherCosts').addEventListener('input', calculateAdvanced);
                
                // Funzione per aggiornare il grafico dei premi avanzati
                function updateAdvancedPrizeChart() {
                    const ctx = document.getElementById('advancedPrizeChart').getContext('2d');
                    
                    // Prepara i dati per il grafico
                    const labels = [];
                    const rareData = [];
                    const boosterData = [];
                    
                    // Raccogli i dati dai premi personalizzati
                    const maxPrizes = Math.min(parseInt(document.getElementById('advancedParticipants').value) || 8, 8);
                    const boosterPrice = parseFloat(document.getElementById('advancedBoosterPrice').value) || 4.25;
                    
                    for (let i = 1; i <= maxPrizes; i++) {
                        labels.push(`${i}° posto`);
                        const rareValue = parseFloat(document.getElementById(`advancedRare${i}`).value) || 0;
                        const boosters = parseInt(document.getElementById(`advancedBoosters${i}`).value) || 0;
                        const boosterValue = boosters * boosterPrice;
                        
                        rareData.push(rareValue);
                        boosterData.push(boosterValue);
                    }
                    
                    // Distruggi il grafico esistente se presente
                    if (window.advancedPrizeChart) {
                        window.advancedPrizeChart.destroy();
                    }
                    
                    // Crea il nuovo grafico
                    window.advancedPrizeChart = new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: labels,
                            datasets: [
                                {
                                    label: 'Valore carte rare (€)',
                                    data: rareData,
                                    backgroundColor: 'rgba(215, 0, 0, 0.7)',
                                    borderColor: 'rgba(215, 0, 0, 1)',
                                    borderWidth: 1
                                },
                                {
                                    label: 'Valore bustine (€)',
                                    data: boosterData,
                                    backgroundColor: 'rgba(46, 98, 163, 0.7)',
                                    borderColor: 'rgba(46, 98, 163, 1)',
                                    borderWidth: 1
                                }
                            ]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    stacked: true,
                                    title: {
                                        display: true,
                                        text: 'Valore (€)',
                                        color: document.body.classList.contains('dark-mode') ? '#e0e0e0' : '#333'
                                    },
                                    grid: {
                                        color: document.body.classList.contains('dark-mode') ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)'
                                    },
                                    ticks: {
                                        color: document.body.classList.contains('dark-mode') ? '#e0e0e0' : '#333'
                                    }
                                },
                                x: {
                                    stacked: true,
                                    grid: {
                                        color: document.body.classList.contains('dark-mode') ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)'
                                    },
                                    ticks: {
                                        color: document.body.classList.contains('dark-mode') ? '#e0e0e0' : '#333'
                                    }
                                }
                            },
                            plugins: {
                                legend: {
                                    labels: {
                                        color: document.body.classList.contains('dark-mode') ? '#e0e0e0' : '#333'
                                    }
                                },
                                title: {
                                    display: true,
                                    text: 'Distribuzione Premi Avanzata',
                                    color: document.body.classList.contains('dark-mode') ? '#e0e0e0' : '#333'
                                }
                            }
                        }
                    });
                }
                
                // Salva la configurazione avanzata
                document.getElementById('saveAdvancedConfig').addEventListener('click', function() {
                    // Crea un oggetto con la configurazione
                    const config = {
                        format: document.getElementById('tournamentFormat').value,
                        participants: document.getElementById('advancedParticipants').value,
                        fee: document.getElementById('advancedFee').value,
                        boosterPrice: document.getElementById('advancedBoosterPrice').value,
                        locationCost: document.getElementById('locationCost').value,
                        judgeCost: document.getElementById('judgeCost').value,
                        otherCosts: document.getElementById('otherCosts').value,
                        rounds: document.getElementById('tournamentRounds').value,
                        prizes: []
                    };
                    
                    // Salva i premi personalizzati
                    const maxPrizes = Math.min(parseInt(document.getElementById('advancedParticipants').value) || 8, 8);
                    for (let i = 1; i <= maxPrizes; i++) {
                        config.prizes.push({
                            rare: document.getElementById(`advancedRare${i}`).value,
                            boosters: document.getElementById(`advancedBoosters${i}`).value,
                            extra: document.getElementById(`advancedExtra${i}`).value
                        });
                    }
                    
                    // Salva nel localStorage
                    localStorage.setItem('onePieceAdvancedConfig', JSON.stringify(config));
                    
                    // Mostra notifica
                    const notification = document.getElementById('saveNotification');
                    notification.style.display = 'block';
                    notification.classList.add('slide-in-right');
                    
                    setTimeout(() => {
                        notification.classList.remove('slide-in-right');
                        notification.style.display = 'none';
                    }, 3000);
                });
                
                // Carica la configurazione salvata
                const savedConfig = localStorage.getItem('onePieceAdvancedConfig');
                if (savedConfig) {
                    const config = JSON.parse(savedConfig);
                    
                    // Applica i valori salvati
                    document.getElementById('tournamentFormat').value = config.format;
                    document.getElementById('advancedParticipants').value = config.participants;
                    document.getElementById('advancedFee').value = config.fee;
                    document.getElementById('advancedBoosterPrice').value = config.boosterPrice;
                    document.getElementById('locationCost').value = config.locationCost;
                    document.getElementById('judgeCost').value = config.judgeCost;
                    document.getElementById('otherCosts').value = config.otherCosts;
                    document.getElementById('tournamentRounds').value = config.rounds;
                    
                    // Aggiorna la vista
                    updateAdvancedView();
                    
                    // Applica i premi personalizzati dopo che la tabella è stata creata
                    setTimeout(() => {
                        config.prizes.forEach((prize, index) => {
                            const i = index + 1;
                            if (i <= maxPrizes) {
                                document.getElementById(`advancedRare${i}`).value = prize.rare;
                                document.getElementById(`advancedBoosters${i}`).value = prize.boosters;
                                document.getElementById(`advancedExtra${i}`).value = prize.extra;
                            }
                        });
                        
                        // Calcola con i valori caricati
                        calculateAdvanced();
                    }, 100);
                }
                
                // Crea righe per ogni posizione premiata
                const maxPrizes = Math.min(participants, 8); // Massimo 8 premi
                
                for (let i = 1; i <= maxPrizes; i++) {
                    const row = document.createElement('tr');
                    
                    // Posizione
                    const posCell = document.createElement('td');
                    posCell.textContent = `${i}° posto`;
                    row.appendChild(posCell);
                    
                    // Input per carte rare
                    const rareCell = document.createElement('td');
                    const rareInput = document.createElement('input');
                    rareInput.type = 'number';
                    rareInput.min = '0';
                    rareInput.id = `advancedRare${i}`;
                    rareInput.className = 'prize-input';
                    rareInput.placeholder = 'Valore in €';
                    rareInput.addEventListener('input', calculateAdvanced);
                    rareCell.appendChild(rareInput);
                    row.appendChild(rareCell);
                    
                    // Input per bustine
                    const boosterCell = document.createElement('td');
                    const boosterInput = document.createElement('input');
                    boosterInput.type = 'number';
                    boosterInput.min = '0';
                    boosterInput.id = `advancedBoosters${i}`;
                    boosterInput.className = 'prize-input';
                    boosterInput.placeholder = 'Numero bustine';
                    boosterInput.addEventListener('input', calculateAdvanced);
                    boosterCell.appendChild(boosterInput);
                    row.appendChild(boosterCell);
                    
                    // Input per premi extra
                    const extraCell = document.createElement('td');
                    const extraInput = document.createElement('input');
                    extraInput.type = 'text';
                    extraInput.id = `advancedExtra${i}`;
                    extraInput.className = 'prize-input';
                    extraInput.placeholder = 'Descrizione premio extra';
                    extraCell.appendChild(extraInput);
                    row.appendChild(extraCell);
                    
                    // Valore totale (calcolato)
                    const totalCell = document.createElement('td');
                    totalCell.id = `advancedTotal${i}`;
                    totalCell.textContent = '€0.00';
                    row.appendChild(totalCell);
                    
                    tbody.appendChild(row);
                }
            }
            
            // Funzione per calcolare i risultati della modalità avanzata
            function calculateAdvanced() {
                const participants = parseInt(document.getElementById('advancedParticipants').value) || 8;
                const fee = parseFloat(document.getElementById('advancedFee').value) || 15;
                const boosterPrice = parseFloat(document.getElementById('advancedBoosterPrice').value) || 4.25;
                const format = document.getElementById('tournamentFormat').value;
                const rounds = parseInt(document.getElementById('tournamentRounds').value) || 3;
                
                // Calcola il montepremi totale
                const prizePool = participants * fee;
                document.getElementById('advancedPrizePool').textContent = `€${prizePool.toFixed(2)}`;
                
                // Calcola il numero di partite
                let matches = 0;
                if (format === 'elimination') {
                    matches = participants - 1; // In un torneo a eliminazione diretta
                } else if (format === 'swiss') {
                    matches = Math.floor(participants * rounds / 2); // In un torneo svizzero
                } else if (format === 'roundRobin') {
                    matches = (participants * (participants - 1)) / 2; // In un girone all'italiana
                }
                document.getElementById('advancedMatches').textContent = matches;
                
                // Calcola la durata stimata (20 minuti per partita + pause)
                const durationHours = Math.ceil((matches * 20 + (rounds * 10)) / 60);
                document.getElementById('advancedDuration').textContent = `${durationHours} ore`;
                
                // Calcola i costi totali dei premi
                let totalPrizeCost = 0;
                const maxPrizes = Math.min(participants, 8);
                
                for (let i = 1; i <= maxPrizes; i++) {
                    const rareValue = parseFloat(document.getElementById(`advancedRare${i}`).value) || 0;
                    const boosters = parseInt(document.getElementById(`advancedBoosters${i}`).value) || 0;
                    const boosterValue = boosters * boosterPrice;
                    
                    const totalValue = rareValue + boosterValue;
                    document.getElementById(`advancedTotal${i}`).textContent = `€${totalValue.toFixed(2)}`;
                    
                    totalPrizeCost += totalValue;
                }
                
                // Aggiorna i totali
                document.getElementById('advancedTotalPrizeCost').textContent = `€${totalPrizeCost.toFixed(2)}`;
                
                // Calcola il profitto
                const profit = prizePool - totalPrizeCost;
                const profitElement = document.getElementById('advancedProfit');
                profitElement.textContent = `€${profit.toFixed(2)}`;
                profitElement.className = profit >= 0 ? 'green' : 'red';
                
                // Calcola e aggiorna le statistiche
                const profitPercentage = (profit / prizePool) * 100;
                document.getElementById('advancedProfitPercentage').textContent = 
                    `${profitPercentage.toFixed(2)}% ${profitPercentage >= 0 ? '✅' : '❌'}`;
                
                const prizeToFeeRatio = totalPrizeCost / prizePool * 100;
                document.getElementById('advancedPrizeRatio').textContent = 
                    `${prizeToFeeRatio.toFixed(2)}% ${prizeToFeeRatio <= 100 ? '✅' : '⚠️'}`;
                
                // Aggiorna il grafico
                updateAdvancedChart();
            }
            
            // Funzione per aggiornare il grafico della modalità avanzata
            function updateAdvancedChart() {
                const ctx = document.getElementById('advancedPrizeChart').getContext('2d');
                const maxPrizes = Math.min(parseInt(document.getElementById('advancedParticipants').value) || 8, 8);
                const boosterPrice = parseFloat(document.getElementById('advancedBoosterPrice').value) || 4.25;
                
                // Raccogli i dati per il grafico
                const labels = [];
                const rareValues = [];
                const boosterValues = [];
                
                for (let i = 1; i <= maxPrizes; i++) {
                    labels.push(`${i}° posto`);
                    rareValues.push(parseFloat(document.getElementById(`advancedRare${i}`).value) || 0);
                    boosterValues.push((parseInt(document.getElementById(`advancedBoosters${i}`).value) || 0) * boosterPrice);
                }
                
                // Distruggi il grafico esistente se presente
                if (window.advancedChart) {
                    window.advancedChart.destroy();
                }
                
                // Crea il nuovo grafico
                window.advancedChart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: labels,
                        datasets: [
                            {
                                label: 'Carte Rare (€)',
                                data: rareValues,
                                backgroundColor: '#FFCD00',
                                borderColor: '#2E62A3',
                                borderWidth: 1
                            },
                            {
                                label: 'Bustine (€)',
                                data: boosterValues,
                                backgroundColor: '#62C3F8',
                                borderColor: '#2E62A3',
                                borderWidth: 1
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            x: {
                                stacked: true
                            },
                            y: {
                                stacked: true,
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Valore (€)'
                                }
                            }
                        },
                        plugins: {
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const value = context.raw;
                                        return `${context.dataset.label}: €${value.toFixed(2)}`;
                                    }
                                }
                            }
                        }
                    }
                });
            }
            
            // Aggiungi event listeners
            tournamentFormat.addEventListener('change', updateAdvancedView);
            document.getElementById('advancedParticipants').addEventListener('input', updateAdvancedView);
            document.getElementById('advancedFee').addEventListener('input', calculateAdvanced);
            document.getElementById('advancedBoosterPrice').addEventListener('input', calculateAdvanced);
            document.getElementById('tournamentRounds').addEventListener('input', calculateAdvanced);
            
            // Inizializza la vista
            updateAdvancedView();
        }
        
        // Funzione per validare gli input numerici
        function validateInput(e) {
            const input = e.target;
            const value = parseFloat(input.value);
            const inputId = input.id;
            let validationMessage = '';
            
            if (input.min && value < parseFloat(input.min)) {
                validationMessage = `Il valore minimo è ${input.min}`;
                input.setCustomValidity(validationMessage);
            } else if (input.max && value > parseFloat(input.max)) {
                validationMessage = `Il valore massimo è ${input.max}`;
                input.setCustomValidity(validationMessage);
            } else if (isNaN(value)) {
                validationMessage = 'Inserisci un numero valido';
                input.setCustomValidity(validationMessage);
            } else {
                input.setCustomValidity('');
            }
            
            // Gestione messaggi di validazione specifici
            const validationElement = document.getElementById(`${inputId}Validation`);
            if (validationElement) {
                if (validationMessage) {
                    validationElement.textContent = validationMessage;
                    validationElement.style.display = 'block';
                    input.classList.add('invalid');
                } else {
                    validationElement.style.display = 'none';
                    input.classList.remove('invalid');
                }
            }
        }
        
        // Funzione per inizializzare la modalità simulazione
        function setupSimulationMode() {
            // Ottieni gli elementi del DOM
            const simulationForm = document.getElementById('simulationForm');
            const runSimulationBtn = document.getElementById('runSimulation');
            const simulationResults = document.getElementById('simulationResults');
            const comparisonChartCanvas = document.getElementById('comparisonChart');
            
            // Array per memorizzare i risultati delle simulazioni
            if (!window.simulationResults) {
                window.simulationResults = [];
            }
            
            // Aggiungi event listener per il pulsante di simulazione
            if (runSimulationBtn) {
                runSimulationBtn.addEventListener('click', runSimulation);
            }
            
            // Funzione per eseguire la simulazione
            function runSimulation() {
                // Ottieni i parametri della simulazione
                const baseParticipants = parseInt(document.getElementById('baseParticipants').value) || 8;
                const maxParticipants = parseInt(document.getElementById('maxParticipants').value) || 32;
                const participantsStep = parseInt(document.getElementById('participantsStep').value) || 4;
                
                const baseFee = parseFloat(document.getElementById('baseFee').value) || 15;
                const maxFee = parseFloat(document.getElementById('maxFee').value) || 25;
                const feeStep = parseFloat(document.getElementById('feeStep').value) || 2.5;
                
                const boosterPrice = parseFloat(document.getElementById('simulationBoosterPrice').value) || 4.25;
                const rareCardsValue = parseFloat(document.getElementById('simulationRareCards').value) || 250;
                
                // Svuota i risultati precedenti
                window.simulationResults = [];
                
                // Esegui simulazioni per diverse combinazioni di partecipanti e quote
                for (let participants = baseParticipants; participants <= maxParticipants; participants += participantsStep) {
                    for (let fee = baseFee; fee <= maxFee; fee += feeStep) {
                        // Calcola i risultati per questa combinazione
                        const prizePool = participants * fee;
                        
                        // Calcola la distribuzione dei premi (semplificata)
                        const firstPlacePrize = prizePool * 0.5; // 50% al primo
                        const secondPlacePrize = prizePool * 0.3; // 30% al secondo
                        const thirdPlacePrize = prizePool * 0.1; // 10% al terzo
                        
                        // Calcola il costo dei premi (bustine)
                        const totalBoosters = Math.floor(participants * 0.5); // Metà dei partecipanti riceve bustine
                        const boostersCost = totalBoosters * boosterPrice;
                        
                        // Calcola il profitto
                        const profit = prizePool - (firstPlacePrize + secondPlacePrize + thirdPlacePrize + boostersCost);
                        const profitPercentage = (profit / prizePool) * 100;
                        
                        // Calcola l'efficienza
                        const efficiency = (firstPlacePrize + secondPlacePrize + thirdPlacePrize + boostersCost) / prizePool * 100;
                        
                        // Aggiungi i risultati all'array
                        window.simulationResults.push({
                            participants: participants,
                            fee: fee,
                            prizePool: prizePool,
                            profit: profit,
                            profitPercentage: profitPercentage,
                            efficiency: efficiency
                        });
                    }
                }
                
                // Aggiorna la tabella dei risultati
                updateSimulationTable();
                
                // Aggiorna il grafico comparativo
                updateComparisonChart();
                
                // Genera raccomandazioni
                generateRecommendations();
            }
            
            // Funzione per aggiornare la tabella dei risultati
            function updateSimulationTable() {
                const tableBody = document.getElementById('simulationResultsBody');
                tableBody.innerHTML = '';
                
                // Ordina i risultati per efficienza (decrescente)
                window.simulationResults.sort((a, b) => b.efficiency - a.efficiency);
                
                // Aggiungi righe alla tabella
                window.simulationResults.forEach((result, index) => {
                    const row = document.createElement('tr');
                    
                    // Aggiungi classe per evidenziare i migliori risultati
                    if (index < 3) {
                        row.classList.add('highlight-row');
                    }
                    
                    row.innerHTML = `
                        <td>${result.participants}</td>
                        <td>€${result.fee.toFixed(2)}</td>
                        <td>€${result.prizePool.toFixed(2)}</td>
                        <td class="${result.profit >= 0 ? 'green' : 'red'}">€${result.profit.toFixed(2)}</td>
                        <td>${result.profitPercentage.toFixed(2)}%</td>
                        <td>${result.efficiency.toFixed(2)}%</td>
                        <td>
                            <button class="small-btn" onclick="applySimulation(${index})">Applica</button>
                        </td>
                    `;
                    
                    tableBody.appendChild(row);
                });
            }
            
            // Funzione per aggiornare il grafico comparativo
            function updateComparisonChart() {
                const ctx = document.getElementById('comparisonChart').getContext('2d');
                
                // Prepara i dati per il grafico
                const labels = [];
                const profitData = [];
                const efficiencyData = [];
                
                // Prendi i primi 5 risultati per il grafico
                const topResults = window.simulationResults.slice(0, 5);
                
                topResults.forEach(result => {
                    labels.push(`${result.participants} part. - €${result.fee}`);
                    profitData.push(result.profitPercentage);
                    efficiencyData.push(result.efficiency);
                });
                
                // Distruggi il grafico esistente se presente
                if (comparisonChart) {
                    comparisonChart.destroy();
                }
                
                // Crea il nuovo grafico
                comparisonChart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: labels,
                        datasets: [
                            {
                                label: '% Profitto',
                                data: profitData,
                                backgroundColor: 'rgba(215, 0, 0, 0.7)',
                                borderColor: 'rgba(215, 0, 0, 1)',
                                borderWidth: 1
                            },
                            {
                                label: '% Efficienza',
                                data: efficiencyData,
                                backgroundColor: 'rgba(46, 98, 163, 0.7)',
                                borderColor: 'rgba(46, 98, 163, 1)',
                                borderWidth: 1
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Percentuale (%)',
                                    color: document.body.classList.contains('dark-mode') ? '#e0e0e0' : '#333'
                                },
                                grid: {
                                    color: document.body.classList.contains('dark-mode') ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)'
                                },
                                ticks: {
                                    color: document.body.classList.contains('dark-mode') ? '#e0e0e0' : '#333'
                                }
                            },
                            x: {
                                grid: {
                                    color: document.body.classList.contains('dark-mode') ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)'
                                },
                                ticks: {
                                    color: document.body.classList.contains('dark-mode') ? '#e0e0e0' : '#333'
                                }
                            }
                        },
                        plugins: {
                            legend: {
                                labels: {
                                    color: document.body.classList.contains('dark-mode') ? '#e0e0e0' : '#333'
                                }
                            },
                            title: {
                                display: true,
                                text: 'Confronto Configurazioni',
                                color: document.body.classList.contains('dark-mode') ? '#e0e0e0' : '#333'
                            }
                        }
                    }
                });
            }
            
            // Funzione per generare raccomandazioni
            function generateRecommendations() {
                const recommendationsDiv = document.getElementById('recommendations');
                
                // Trova la configurazione con la migliore efficienza
                const bestEfficiency = window.simulationResults.reduce((prev, current) => 
                    (prev.efficiency > current.efficiency) ? prev : current);
                
                // Trova la configurazione con il miglior profitto
                const bestProfit = window.simulationResults.reduce((prev, current) => 
                    (prev.profit > current.profit) ? prev : current);
                
                // Genera le raccomandazioni
                let recommendations = `
                    <h4>Raccomandazioni</h4>
                    <ul>
                        <li><strong>Configurazione più efficiente:</strong> ${bestEfficiency.participants} partecipanti con quota di €${bestEfficiency.fee.toFixed(2)} (efficienza: ${bestEfficiency.efficiency.toFixed(2)}%)</li>
                        <li><strong>Configurazione più redditizia:</strong> ${bestProfit.participants} partecipanti con quota di €${bestProfit.fee.toFixed(2)} (profitto: €${bestProfit.profit.toFixed(2)})</li>
                `;
                
                // Aggiungi consigli specifici
                if (bestEfficiency.participants !== bestProfit.participants || bestEfficiency.fee !== bestProfit.fee) {
                    recommendations += `
                        <li><strong>Consiglio:</strong> Se prioritizzi la soddisfazione dei giocatori, scegli la configurazione più efficiente. Se prioritizzi il guadagno, scegli quella più redditizia.</li>
                    `;
                }
                
                // Aggiungi consigli sul prezzo delle bustine
                const boosterPrice = parseFloat(document.getElementById('simulationBoosterPrice').value) || 4.25;
                if (boosterPrice > 4.5) {
                    recommendations += `
                        <li><strong>Attenzione:</strong> Il prezzo delle bustine è relativamente alto (€${boosterPrice.toFixed(2)}). Considera di negoziare un prezzo migliore con il fornitore.</li>
                    `;
                }
                
                recommendations += `</ul>`;
                
                // Aggiorna il div delle raccomandazioni
                recommendationsDiv.innerHTML = recommendations;
            }
            
            // Funzione per applicare una configurazione simulata
            function applySimulation(index) {
                const result = window.simulationResults[index];
                
                // Applica i valori alla modalità base
                document.getElementById('participants').value = result.participants;
                document.getElementById('entryFee').value = result.fee.toFixed(2);
                
                // Passa alla modalità base
                document.getElementById('basicModeBtn').click();
                
                // Calcola con i nuovi valori
                calculate();
                
                // Mostra notifica
                const notification = document.getElementById('saveNotification');
                notification.textContent = 'Configurazione applicata!';
                notification.style.display = 'block';
                notification.classList.add('slide-in-right');
                
                setTimeout(() => {
                    notification.classList.remove('slide-in-right');
                    notification.style.display = 'none';
                    notification.textContent = 'Configurazione salvata!';
                }, 3000);
            }
            }
            
            // Funzione per aggiornare il grafico comparativo
            function updateComparisonChart() {
                const ctx = comparisonChartCanvas.getContext('2d');
                
                // Prepara i dati per il grafico
                const labels = window.simulationResults.slice(0, 5).map(result => 
                    `${result.participants} part. - €${result.fee.toFixed(2)}`);
                
                const prizePoolData = window.simulationResults.slice(0, 5).map(result => result.prizePool);
                const profitData = window.simulationResults.slice(0, 5).map(result => result.profit);
                
                // Distruggi il grafico esistente se presente
                if (window.comparisonChart) {
                    window.comparisonChart.destroy();
                }
                
                // Crea il nuovo grafico
                window.comparisonChart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: labels,
                        datasets: [
                            {
                                label: 'Montepremi (€)',
                                data: prizePoolData,
                                backgroundColor: '#FFCD00',
                                borderColor: '#2E62A3',
                                borderWidth: 1
                            },
                            {
                                label: 'Profitto (€)',
                                data: profitData,
                                backgroundColor: '#D70000',
                                borderColor: '#2E62A3',
                                borderWidth: 1
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Valore (€)'
                                }
                            }
                        },
                        plugins: {
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const value = context.raw;
                                        return `${context.dataset.label}: €${value.toFixed(2)}`;
                                    }
                                }
                            }
                        }
                    }
                });
            }
            
            // Funzione per generare raccomandazioni
            function generateRecommendations() {
                const recommendationElement = document.getElementById('simulationRecommendation');
                
                if (window.simulationResults.length === 0) {
                    recommendationElement.textContent = 'Esegui una simulazione per ricevere raccomandazioni.';
                    return;
                }
                
                // Trova la simulazione con la migliore efficienza
                const bestEfficiency = window.simulationResults[0];
                
                // Trova la simulazione con il miglior profitto
                const bestProfit = [...window.simulationResults].sort((a, b) => b.profit - a.profit)[0];
                
                // Genera la raccomandazione
                let recommendation = `<strong>Configurazione ottimale:</strong> `;
                
                if (bestEfficiency.participants === bestProfit.participants && 
                    bestEfficiency.fee === bestProfit.fee) {
                    // Stessa configurazione per efficienza e profitto
                    recommendation += `${bestEfficiency.participants} partecipanti con quota di €${bestEfficiency.fee.toFixed(2)}. `;
                    recommendation += `Questa configurazione offre sia la migliore efficienza (${bestEfficiency.efficiency.toFixed(2)}%) `;
                    recommendation += `che il miglior profitto (€${bestEfficiency.profit.toFixed(2)}).`;
                } else {
                    // Configurazioni diverse
                    recommendation += `Per la migliore efficienza: ${bestEfficiency.participants} partecipanti con quota di €${bestEfficiency.fee.toFixed(2)} `;
                    recommendation += `(efficienza: ${bestEfficiency.efficiency.toFixed(2)}%, profitto: €${bestEfficiency.profit.toFixed(2)}). `;
                    recommendation += `<br><br>Per il miglior profitto: ${bestProfit.participants} partecipanti con quota di €${bestProfit.fee.toFixed(2)} `;
                    recommendation += `(profitto: €${bestProfit.profit.toFixed(2)}, efficienza: ${bestProfit.efficiency.toFixed(2)}%).`;
                }
                
                recommendationElement.innerHTML = recommendation;
            }
            
            // Funzione per applicare una simulazione alla modalità base
            window.applySimulation = function(index) {
                const simulation = window.simulationResults[index];
                
                // Passa alla modalità base
                document.getElementById('basicModeBtn').click();
                
                // Applica i valori della simulazione
                document.getElementById('participants').value = simulation.participants;
                document.getElementById('fee').value = simulation.fee;
                
                // Ricalcola
                calculate();
                
                // Mostra notifica
                const notification = document.getElementById('saveNotification');
                notification.textContent = 'Simulazione applicata!';
                notification.style.display = 'block';
                notification.classList.add('slide-in-right');
                
                setTimeout(() => {
                    notification.classList.remove('slide-in-right');
                    notification.style.display = 'none';
                    notification.textContent = 'Configurazione salvata!';
                }, 3000);
            }
            
            // Event listener per il pulsante di simulazione è già stato aggiunto in precedenza
        
        // Funzione per inizializzare la modalità storia tornei
        function setupHistoryMode() {
            // Ottieni gli elementi del DOM
            const saveTournamentBtn = document.getElementById('saveTournament');
            const tournamentHistoryTable = document.getElementById('tournamentHistoryTable');
            const historyChartCanvas = document.getElementById('historyChart');
            
            // Carica i tornei salvati dal localStorage
            if (!window.savedTournaments) {
                const savedData = localStorage.getItem('onePieceTournamentHistory');
                window.savedTournaments = savedData ? JSON.parse(savedData) : [];
            }
            
            // Aggiorna la tabella della storia
            updateHistoryTable();
            
            // Aggiorna il grafico della storia
            updateHistoryChart();
            
            // Funzione per salvare un nuovo torneo
            function saveTournament() {
                // Ottieni i dati del torneo
                const tournamentName = document.getElementById('tournamentName').value;
                const tournamentDate = document.getElementById('tournamentDate').value;
                const tournamentLocation = document.getElementById('tournamentLocation').value;
                const participants = parseInt(document.getElementById('historyParticipants').value) || 0;
                const fee = parseFloat(document.getElementById('historyFee').value) || 0;
                const prizePool = participants * fee;
                const expenses = parseFloat(document.getElementById('historyExpenses').value) || 0;
                const profit = prizePool - expenses;
                
                // Validazione
                if (!tournamentName || !tournamentDate || participants <= 0 || fee <= 0) {
                    alert('Compila tutti i campi obbligatori: nome, data, partecipanti e quota.');
                    return;
                }
                
                // Crea l'oggetto torneo
                const tournament = {
                    id: Date.now(), // ID univoco basato sul timestamp
                    name: tournamentName,
                    date: tournamentDate,
                    location: tournamentLocation,
                    participants: participants,
                    fee: fee,
                    prizePool: prizePool,
                    expenses: expenses,
                    profit: profit,
                    notes: document.getElementById('tournamentNotes').value
                };
                
                // Aggiungi il torneo all'array
                window.savedTournaments.push(tournament);
                
                // Salva nel localStorage
                localStorage.setItem('onePieceTournamentHistory', JSON.stringify(window.savedTournaments));
                
                // Aggiorna la tabella e il grafico
                updateHistoryTable();
                updateHistoryChart();
                
                // Resetta il form
                document.getElementById('tournamentName').value = '';
                document.getElementById('tournamentDate').value = '';
                document.getElementById('tournamentLocation').value = '';
                document.getElementById('historyParticipants').value = '';
                document.getElementById('historyFee').value = '';
                document.getElementById('historyExpenses').value = '';
                document.getElementById('tournamentNotes').value = '';
                
                // Mostra notifica
                const notification = document.getElementById('saveNotification');
                notification.textContent = 'Torneo salvato!';
                notification.style.display = 'block';
                notification.classList.add('slide-in-right');
                
                setTimeout(() => {
                    notification.classList.remove('slide-in-right');
                    notification.style.display = 'none';
                    notification.textContent = 'Configurazione salvata!';
                }, 3000);
            }
            
            // Funzione per aggiornare la tabella della storia
            function updateHistoryTable() {
                const tableBody = document.getElementById('historyTableBody');
                tableBody.innerHTML = '';
                
                // Ordina i tornei per data (più recenti prima)
                window.savedTournaments.sort((a, b) => new Date(b.date) - new Date(a.date));
                
                // Aggiungi righe alla tabella
                window.savedTournaments.forEach((tournament) => {
                    const row = document.createElement('tr');
                    
                    const date = new Date(tournament.date);
                    const formattedDate = `${date.getDate().toString().padStart(2, '0')}/${(date.getMonth() + 1).toString().padStart(2, '0')}/${date.getFullYear()}`;
                    
                    row.innerHTML = `
                        <td>${tournament.name}</td>
                        <td>${formattedDate}</td>
                        <td>${tournament.location}</td>
                        <td>${tournament.participants}</td>
                        <td>€${tournament.fee.toFixed(2)}</td>
                        <td>€${tournament.prizePool.toFixed(2)}</td>
                        <td class="${tournament.profit >= 0 ? 'green' : 'red'}">€${tournament.profit.toFixed(2)}</td>
                        <td>
                            <button class="small-btn" onclick="viewTournamentDetails(${tournament.id})">Dettagli</button>
                            <button class="small-btn" onclick="deleteTournament(${tournament.id})">Elimina</button>
                        </td>
                    `;
                    
                    tableBody.appendChild(row);
                });
                
                // Aggiorna le statistiche complessive
                updateHistoryStats();
            }
            
            // Funzione per aggiornare le statistiche complessive
            function updateHistoryStats() {
                const statsDiv = document.getElementById('historyStats');
                
                // Se non ci sono tornei, mostra un messaggio
                if (window.savedTournaments.length === 0) {
                    statsDiv.innerHTML = '<p>Nessun torneo salvato.</p>';
                    return;
                }
                
                // Calcola le statistiche complessive
                const totalTournaments = window.savedTournaments.length;
                const totalParticipants = window.savedTournaments.reduce((sum, t) => sum + t.participants, 0);
                const totalPrizePool = window.savedTournaments.reduce((sum, t) => sum + t.prizePool, 0);
                const totalProfit = window.savedTournaments.reduce((sum, t) => sum + t.profit, 0);
                const avgParticipants = totalParticipants / totalTournaments;
                const avgPrizePool = totalPrizePool / totalTournaments;
                const avgProfit = totalProfit / totalTournaments;
                
                // Trova il torneo con il maggior numero di partecipanti
                const maxParticipantsTournament = window.savedTournaments.reduce((prev, current) => 
                    (prev.participants > current.participants) ? prev : current);
                
                // Trova il torneo più redditizio
                const mostProfitableTournament = window.savedTournaments.reduce((prev, current) => 
                    (prev.profit > current.profit) ? prev : current);
                
                // Aggiorna il div delle statistiche
                statsDiv.innerHTML = `
                    <p><strong>Totale tornei:</strong> ${totalTournaments}</p>
                    <p><strong>Totale partecipanti:</strong> ${totalParticipants}</p>
                    <p><strong>Media partecipanti:</strong> ${avgParticipants.toFixed(1)}</p>
                    <p><strong>Montepremi totale:</strong> €${totalPrizePool.toFixed(2)}</p>
                    <p><strong>Profitto totale:</strong> <span class="${totalProfit >= 0 ? 'green' : 'red'}">€${totalProfit.toFixed(2)}</span></p>
                    <p><strong>Profitto medio:</strong> <span class="${avgProfit >= 0 ? 'green' : 'red'}">€${avgProfit.toFixed(2)}</span></p>
                    <p><strong>Torneo più grande:</strong> ${maxParticipantsTournament.name} (${maxParticipantsTournament.participants} partecipanti)</p>
                    <p><strong>Torneo più redditizio:</strong> ${mostProfitableTournament.name} (€${mostProfitableTournament.profit.toFixed(2)})</p>
                `;
                
                // Aggiorna il grafico storico
                updateHistoryChart();
            }
            
            // Funzione per aggiornare il grafico storico
            function updateHistoryChart() {
                const ctx = document.getElementById('historyChart').getContext('2d');
                
                // Se non ci sono tornei, non creare il grafico
                if (window.savedTournaments.length === 0) {
                    return;
                }
                
                // Ordina i tornei per data (più vecchi prima)
                const sortedTournaments = [...window.savedTournaments].sort((a, b) => new Date(a.date) - new Date(b.date));
                
                // Prepara i dati per il grafico
                const labels = [];
                const participantsData = [];
                const profitData = [];
                
                sortedTournaments.forEach(tournament => {
                    const date = new Date(tournament.date);
                    labels.push(`${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear().toString().substr(2, 2)}`);
                    participantsData.push(tournament.participants);
                    profitData.push(tournament.profit);
                });
                
                // Distruggi il grafico esistente se presente
                if (historyChart) {
                    historyChart.destroy();
                }
                
                // Crea il nuovo grafico
                historyChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [
                            {
                                label: 'Partecipanti',
                                data: participantsData,
                                backgroundColor: 'rgba(46, 98, 163, 0.2)',
                                borderColor: 'rgba(46, 98, 163, 1)',
                                borderWidth: 2,
                                yAxisID: 'y',
                                tension: 0.1
                            },
                            {
                                label: 'Profitto (€)',
                                data: profitData,
                                backgroundColor: 'rgba(215, 0, 0, 0.2)',
                                borderColor: 'rgba(215, 0, 0, 1)',
                                borderWidth: 2,
                                yAxisID: 'y1',
                                tension: 0.1
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                type: 'linear',
                                display: true,
                                position: 'left',
                                title: {
                                    display: true,
                                    text: 'Partecipanti',
                                    color: document.body.classList.contains('dark-mode') ? '#e0e0e0' : '#333'
                                },
                                grid: {
                                    color: document.body.classList.contains('dark-mode') ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)'
                                },
                                ticks: {
                                    color: document.body.classList.contains('dark-mode') ? '#e0e0e0' : '#333'
                                }
                            },
                            y1: {
                                type: 'linear',
                                display: true,
                                position: 'right',
                                title: {
                                    display: true,
                                    text: 'Profitto (€)',
                                    color: document.body.classList.contains('dark-mode') ? '#e0e0e0' : '#333'
                                },
                                grid: {
                                    drawOnChartArea: false,
                                    color: document.body.classList.contains('dark-mode') ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)'
                                },
                                ticks: {
                                    color: document.body.classList.contains('dark-mode') ? '#e0e0e0' : '#333'
                                }
                            },
                            x: {
                                grid: {
                                    color: document.body.classList.contains('dark-mode') ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)'
                                },
                                ticks: {
                                    color: document.body.classList.contains('dark-mode') ? '#e0e0e0' : '#333'
                                }
                            }
                        },
                        plugins: {
                            legend: {
                                labels: {
                                    color: document.body.classList.contains('dark-mode') ? '#e0e0e0' : '#333'
                                }
                            },
                            title: {
                                display: true,
                                text: 'Andamento Storico Tornei',
                                color: document.body.classList.contains('dark-mode') ? '#e0e0e0' : '#333'
                            }
                        }
                    }
                });
            }
            
            // Funzione per visualizzare i dettagli di un torneo
            function viewTournamentDetails(tournamentId) {
                // Trova il torneo con l'ID specificato
                const tournament = window.savedTournaments.find(t => t.id === tournamentId);
                
                if (!tournament) {
                    return;
                }
                
                // Formatta la data
                const date = new Date(tournament.date);
                const formattedDate = `${date.getDate().toString().padStart(2, '0')}/${(date.getMonth() + 1).toString().padStart(2, '0')}/${date.getFullYear()}`;
                
                // Aggiorna il div dei dettagli
                const detailsDiv = document.getElementById('tournamentDetails');
                detailsDiv.innerHTML = `
                    <h3>${tournament.name}</h3>
                    <p><strong>Data:</strong> ${formattedDate}</p>
                    <p><strong>Luogo:</strong> ${tournament.location}</p>
                    <p><strong>Partecipanti:</strong> ${tournament.participants}</p>
                    <p><strong>Quota iscrizione:</strong> €${tournament.fee.toFixed(2)}</p>
                    <p><strong>Montepremi totale:</strong> €${tournament.prizePool.toFixed(2)}</p>
                    <p><strong>Spese:</strong> €${tournament.expenses.toFixed(2)}</p>
                    <p><strong>Profitto:</strong> <span class="${tournament.profit >= 0 ? 'green' : 'red'}">€${tournament.profit.toFixed(2)}</span></p>
                    ${tournament.notes ? `<p><strong>Note:</strong> ${tournament.notes}</p>` : ''}
                `;
            }
            
            // Funzione per eliminare un torneo
            function deleteTournament(tournamentId) {
                if (!confirm('Sei sicuro di voler eliminare questo torneo?')) {
                    return;
                }
                
                // Rimuovi il torneo dall'array
                window.savedTournaments = window.savedTournaments.filter(t => t.id !== tournamentId);
                
                // Salva nel localStorage
                localStorage.setItem('onePieceTournamentHistory', JSON.stringify(window.savedTournaments));
                
                // Aggiorna la tabella e il grafico
                updateHistoryTable();
                updateHistoryChart();
                
                // Mostra notifica
                const notification = document.getElementById('saveNotification');
                notification.textContent = 'Torneo eliminato!';
                notification.style.display = 'block';
                notification.classList.add('slide-in-right');
                
                setTimeout(() => {
                    notification.classList.remove('slide-in-right');
                    notification.style.display = 'none';
                    notification.textContent = 'Configurazione salvata!';
                }, 3000);
            }
            
            // Aggiungi event listener per i pulsanti di esportazione/importazione
            document.getElementById('exportHistory').addEventListener('click', function() {
                // Crea un file JSON con i tornei salvati
                const dataStr = JSON.stringify(window.savedTournaments);
                const dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(dataStr);
                
                // Crea un link per il download
                const exportLink = document.createElement('a');
                exportLink.setAttribute('href', dataUri);
                exportLink.setAttribute('download', 'one_piece_tournament_history.json');
                exportLink.click();
            });
            
            document.getElementById('importHistory').addEventListener('click', function() {
                // Crea un input file nascosto
                const fileInput = document.createElement('input');
                fileInput.type = 'file';
                fileInput.accept = '.json';
                
                fileInput.addEventListener('change', function(e) {
                    const file = e.target.files[0];
                    if (!file) return;
                    
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        try {
                            const importedData = JSON.parse(e.target.result);
                            
                            // Verifica che i dati siano validi
                            if (Array.isArray(importedData)) {
                                // Aggiungi i tornei importati a quelli esistenti
                                window.savedTournaments = [...window.savedTournaments, ...importedData];
                                
                                // Salva nel localStorage
                                localStorage.setItem('onePieceTournamentHistory', JSON.stringify(window.savedTournaments));
                                
                                // Aggiorna la tabella e il grafico
                                updateHistoryTable();
                                updateHistoryChart();
                                
                                // Mostra notifica
                                const notification = document.getElementById('saveNotification');
                                notification.textContent = `Importati ${importedData.length} tornei!`;
                                notification.style.display = 'block';
                                notification.classList.add('slide-in-right');
                                
                                setTimeout(() => {
                                    notification.classList.remove('slide-in-right');
                                    notification.style.display = 'none';
                                    notification.textContent = 'Configurazione salvata!';
                                }, 3000);
                            } else {
                                alert('Il file importato non contiene dati validi.');
                            }
                        } catch (error) {
                            alert('Errore durante l\'importazione: ' + error.message);
                        }
                    };
                    reader.readAsText(file);
                });
                
                fileInput.click();
            });
            
            // Funzione per aggiornare le statistiche della storia
            function updateHistoryStats() {
                const statsElement = document.getElementById('historyStats');
                
                if (window.savedTournaments.length === 0) {
                    statsElement.innerHTML = '<p>Nessun torneo salvato.</p>';
                    return;
                }
                
                // Calcola le statistiche
                const totalTournaments = window.savedTournaments.length;
                const totalParticipants = window.savedTournaments.reduce((sum, t) => sum + t.participants, 0);
                const totalPrizePool = window.savedTournaments.reduce((sum, t) => sum + t.prizePool, 0);
                const totalProfit = window.savedTournaments.reduce((sum, t) => sum + t.profit, 0);
                const avgParticipants = totalParticipants / totalTournaments;
                const avgPrizePool = totalPrizePool / totalTournaments;
                const avgProfit = totalProfit / totalTournaments;
                
                // Aggiorna l'HTML
                statsElement.innerHTML = `
                    <div><strong>Tornei totali:</strong> ${totalTournaments}</div>
                    <div><strong>Partecipanti totali:</strong> ${totalParticipants}</div>
                    <div><strong>Media partecipanti:</strong> ${avgParticipants.toFixed(1)}</div>
                    <div><strong>Montepremi totale:</strong> €${totalPrizePool.toFixed(2)}</div>
                    <div><strong>Media montepremi:</strong> €${avgPrizePool.toFixed(2)}</div>
                    <div><strong>Profitto totale:</strong> <span class="${totalProfit >= 0 ? 'green' : 'red'}">€${totalProfit.toFixed(2)}</span></div>
                    <div><strong>Profitto medio:</strong> <span class="${avgProfit >= 0 ? 'green' : 'red'}">€${avgProfit.toFixed(2)}</span></div>
                `;
            }
            
            // Funzione per aggiornare il grafico della storia
            function updateHistoryChart() {
                const ctx = historyChartCanvas.getContext('2d');
                
                if (window.savedTournaments.length === 0) {
                    return;
                }
                
                // Ordina i tornei per data (più vecchi prima)
                const sortedTournaments = [...window.savedTournaments].sort((a, b) => new Date(a.date) - new Date(b.date));
                
                // Limita a massimo 10 tornei per il grafico
                const displayTournaments = sortedTournaments.slice(-10);
                
                // Prepara i dati per il grafico
                const labels = displayTournaments.map(t => t.name);
                const participantsData = displayTournaments.map(t => t.participants);
                const prizePoolData = displayTournaments.map(t => t.prizePool);
                const profitData = displayTournaments.map(t => t.profit);
                
                // Distruggi il grafico esistente se presente
                if (window.historyChart) {
                    window.historyChart.destroy();
                }
                
                // Crea il nuovo grafico
                window.historyChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [
                            {
                                label: 'Partecipanti',
                                data: participantsData,
                                borderColor: '#2E62A3',
                                backgroundColor: 'rgba(46, 98, 163, 0.1)',
                                borderWidth: 2,
                                fill: false,
                                tension: 0.1,
                                yAxisID: 'y'
                            },
                            {
                                label: 'Montepremi (€)',
                                data: prizePoolData,
                                borderColor: '#FFCD00',
                                backgroundColor: 'rgba(255, 205, 0, 0.1)',
                                borderWidth: 2,
                                fill: false,
                                tension: 0.1,
                                yAxisID: 'y1'
                            },
                            {
                                label: 'Profitto (€)',
                                data: profitData,
                                borderColor: '#D70000',
                                backgroundColor: 'rgba(215, 0, 0, 0.1)',
                                borderWidth: 2,
                                fill: false,
                                tension: 0.1,
                                yAxisID: 'y1'
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                type: 'linear',
                                display: true,
                                position: 'left',
                                title: {
                                    display: true,
                                    text: 'Partecipanti'
                                }
                            },
                            y1: {
                                type: 'linear',
                                display: true,
                                position: 'right',
                                title: {
                                    display: true,
                                    text: 'Valore (€)'
                                },
                                grid: {
                                    drawOnChartArea: false
                                }
                            }
                        },
                        plugins: {
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const value = context.raw;
                                        if (context.dataset.label === 'Partecipanti') {
                                            return `${context.dataset.label}: ${value}`;
                                        } else {
                                            return `${context.dataset.label}: €${value.toFixed(2)}`;
                                        }
                                    }
                                }
                            }
                        }
                    }
                });
            }
            
            // Funzione per visualizzare i dettagli di un torneo
            window.viewTournamentDetails = function(id) {
                const tournament = window.savedTournaments.find(t => t.id === id);
                
                if (!tournament) {
                    return;
                }
                
                // Crea un modal per i dettagli
                const modal = document.createElement('div');
                modal.className = 'modal';
                modal.style.display = 'block';
                
                const date = new Date(tournament.date);
                const formattedDate = `${date.getDate().toString().padStart(2, '0')}/${(date.getMonth() + 1).toString().padStart(2, '0')}/${date.getFullYear()}`;
                
                modal.innerHTML = `
                    <div class="modal-content">
                        <span class="close-modal" onclick="this.parentElement.parentElement.remove()">&times;</span>
                        <h3>Dettagli Torneo: ${tournament.name}</h3>
                        <div class="tournament-details">
                            <p><strong>Data:</strong> ${formattedDate}</p>
                            <p><strong>Luogo:</strong> ${tournament.location || 'Non specificato'}</p>
                            <p><strong>Partecipanti:</strong> ${tournament.participants}</p>
                            <p><strong>Quota d'iscrizione:</strong> €${tournament.fee.toFixed(2)}</p>
                            <p><strong>Montepremi totale:</strong> €${tournament.prizePool.toFixed(2)}</p>
                            <p><strong>Spese:</strong> €${tournament.expenses.toFixed(2)}</p>
                            <p><strong>Profitto:</strong> <span class="${tournament.profit >= 0 ? 'green' : 'red'}">€${tournament.profit.toFixed(2)}</span></p>
                            <p><strong>Note:</strong> ${tournament.notes || 'Nessuna nota'}</p>
                        </div>
                        <div class="modal-buttons">
                            <button class="copy-btn" onclick="applyHistoryTournament(${tournament.id})">Applica alla modalità base</button>
                        </div>
                    </div>
                `;
                
                document.body.appendChild(modal);
            };
            
            // Funzione per eliminare un torneo
            window.deleteTournament = function(id) {
                if (confirm('Sei sicuro di voler eliminare questo torneo?')) {
                    window.savedTournaments = window.savedTournaments.filter(t => t.id !== id);
                    
                    // Salva nel localStorage
                    localStorage.setItem('onePieceTournamentHistory', JSON.stringify(window.savedTournaments));
                    
                    // Aggiorna la tabella e il grafico
                    updateHistoryTable();
                    updateHistoryChart();
                }
            };
            
            // Funzione per applicare un torneo storico alla modalità base
            window.applyHistoryTournament = function(id) {
                const tournament = window.savedTournaments.find(t => t.id === id);
                
                if (!tournament) {
                    return;
                }
                
                // Passa alla modalità base
                document.getElementById('basicModeBtn').click();
                
                // Applica i valori del torneo
                document.getElementById('participants').value = tournament.participants;
                document.getElementById('fee').value = tournament.fee;
                
                // Ricalcola
                calculate();
                
                // Mostra notifica
                const notification = document.getElementById('saveNotification');
                notification.textContent = 'Configurazione torneo applicata!';
                notification.style.display = 'block';
                notification.classList.add('slide-in-right');
                
                setTimeout(() => {
                    notification.classList.remove('slide-in-right');
                    notification.style.display = 'none';
                    notification.textContent = 'Configurazione salvata!';
                }, 3000);
                
                // Chiudi eventuali modal aperti
                const modals = document.querySelectorAll('.modal');
                modals.forEach(modal => modal.remove());
            };
            
            // Aggiungi event listener al pulsante di salvataggio
            saveTournamentBtn.addEventListener('click', saveTournament);
        }
        
        // Funzione per validare le percentuali
        function validatePercentages() {
            const position1Percent = parseInt(document.getElementById('position1Percent').value) || 0;
            const position2Percent = parseInt(document.getElementById('position2Percent').value) || 0;
            const position3Percent = parseInt(document.getElementById('position3Percent').value) || 0;
            
            const totalPercent = position1Percent + position2Percent + position3Percent;
            const validationMessage = document.getElementById('percentValidation');
            
            if (totalPercent !== 100) {
                validationMessage.style.display = 'block';
                validationMessage.textContent = `La somma attuale è ${totalPercent}%. Deve essere 100%.`;
            } else {
                validationMessage.style.display = 'none';
            }
        }
        
        // Funzione per salvare la configurazione attuale
        function saveConfiguration() {
            const config = {
                participants: document.getElementById('participants').value,
                fee: document.getElementById('fee').value,
                boosterPrice: document.getElementById('boosterPrice').value,
                rareCards: document.getElementById('rareCards').value,
                includeParticipationBoosters: document.getElementById('includeParticipationBoosters').checked,
                showProfit: document.getElementById('showProfit').checked,
                showTargetProfit: document.getElementById('showTargetProfit').checked,
                targetProfit: document.getElementById('targetProfit').value,
                position1Percent: document.getElementById('position1Percent').value,
                position2Percent: document.getElementById('position2Percent').value,
                position3Percent: document.getElementById('position3Percent').value,
                position4Boosters: document.getElementById('position4Boosters').value,
                position5Boosters: document.getElementById('position5Boosters').value,
                position6Boosters: document.getElementById('position6Boosters').value,
                position7Boosters: document.getElementById('position7Boosters').value,
                position8Boosters: document.getElementById('position8Boosters').value,
                version: VERSION
            };
            
            localStorage.setItem('onePieceTournamentConfig', JSON.stringify(config));
            
            // Mostra notifica di salvataggio con animazione
            const notification = document.getElementById('saveNotification');
            notification.style.display = 'block';
            notification.classList.add('slide-in-right');
            
            // Nascondi la notifica dopo 3 secondi
            setTimeout(() => {
                notification.classList.remove('slide-in-right');
                notification.style.display = 'none';
            }, 3000);
            
            return config;
        }
        
        // Funzioni per la condivisione
        function openShareModal() {
            const modal = document.getElementById('shareModal');
            const shareCodeArea = document.getElementById('shareCode');
            
            // Genera il codice di condivisione
            const config = saveConfiguration();
            const shareCode = btoa(JSON.stringify(config));
            
            shareCodeArea.value = shareCode;
            modal.style.display = 'block';
        }
        
        function closeShareModal() {
            document.getElementById('shareModal').style.display = 'none';
        }
        
        function copyShareCode() {
            const shareCodeArea = document.getElementById('shareCode');
            shareCodeArea.select();
            document.execCommand('copy');
            
            // Feedback visivo
            const copyBtn = document.querySelector('.copy-btn');
            const originalText = copyBtn.textContent;
            copyBtn.textContent = 'Copiato! ✓';
            
            setTimeout(() => {
                copyBtn.textContent = originalText;
            }, 2000);
        }
        
        function importConfiguration() {
            const importCode = document.getElementById('importCode').value.trim();
            
            if (!importCode) {
                alert('Inserisci un codice di configurazione valido!');
                return;
            }
            
            try {
                const config = JSON.parse(atob(importCode));
                applyConfiguration(config);
                closeShareModal();
                
                // Mostra notifica
                const notification = document.getElementById('saveNotification');
                notification.textContent = 'Configurazione importata con successo!';
                notification.style.display = 'block';
                
                setTimeout(() => {
                    notification.style.display = 'none';
                    notification.textContent = 'Configurazione salvata!';
                }, 3000);
                
            } catch (e) {
                alert('Codice di configurazione non valido. Verifica e riprova.');
            }
        }
        
        // Chiudi il modal quando si clicca fuori
        window.onclick = function(event) {
            const modal = document.getElementById('shareModal');
            if (event.target === modal) {
                closeShareModal();
            }
        }
        
        // Funzione per caricare la configurazione salvata
        function loadConfiguration() {
            const savedConfig = localStorage.getItem('onePieceTournamentConfig');
            
            if (savedConfig) {
                const config = JSON.parse(savedConfig);
                
                // Verifica la versione
                if (!config.version || config.version !== VERSION) {
                    if (confirm('La configurazione salvata è di una versione precedente. Alcune impostazioni potrebbero non essere compatibili. Vuoi continuare?')) {
                        applyConfiguration(config);
                    }
                } else {
                    applyConfiguration(config);
                }
            } else {
                alert('Nessuna configurazione salvata trovata!');
            }
        }
        
        // Valori predefiniti del calcolatore
        const DEFAULT_CONFIG = {
            participants: 8,
            fee: 15,
            boosterPrice: 4.25,
            rareCards: 250,
            includeParticipationBoosters: true,
            showProfit: true,
            showTargetProfit: true,
            targetProfit: 120,
            position1Percent: 60,
            position2Percent: 30,
            position3Percent: 10,
            position4Boosters: 2,
            position5Boosters: 1,
            position6Boosters: 1,
            position7Boosters: 1,
            position8Boosters: 1,
            version: VERSION
        };
        
        // Funzione per reimpostare i valori predefiniti
        function resetToDefaults() {
            if (confirm('Sei sicuro di voler reimpostare tutti i valori ai predefiniti?')) {
                // Aggiungi animazione al pulsante
                const resetButton = document.querySelector('.reset-button');
                resetButton.classList.add('pulse');
                
                // Rimuovi l'animazione dopo che è completata
                setTimeout(() => {
                    resetButton.classList.remove('pulse');
                }, 500);
                
                applyConfiguration(DEFAULT_CONFIG);
                
                // Mostra notifica
                const notification = document.getElementById('saveNotification');
                notification.textContent = 'Valori reimpostati ai predefiniti!';
                notification.style.display = 'block';
                notification.classList.add('slide-in-right');
                
                setTimeout(() => {
                    notification.classList.remove('slide-in-right');
                    notification.style.display = 'none';
                    notification.textContent = 'Configurazione salvata!';
                }, 3000);
                
                // Aggiungi animazione alle colonne
                document.querySelectorAll('.column-base, .input-column, .prize-column, .finance-column').forEach(el => {
                    el.classList.add('fade-in');
                    setTimeout(() => {
                        el.classList.remove('fade-in');
                    }, 500);
                });
            }
        }
        
        // Funzione per applicare la configurazione caricata
        function applyConfiguration(config) {
            // Applica i valori agli input
            document.getElementById('participants').value = config.participants || DEFAULT_CONFIG.participants;
            document.getElementById('fee').value = config.fee || DEFAULT_CONFIG.fee;
            document.getElementById('boosterPrice').value = config.boosterPrice || DEFAULT_CONFIG.boosterPrice;
            document.getElementById('rareCards').value = config.rareCards || DEFAULT_CONFIG.rareCards;
            document.getElementById('includeParticipationBoosters').checked = config.includeParticipationBoosters !== undefined ? config.includeParticipationBoosters : DEFAULT_CONFIG.includeParticipationBoosters;
            document.getElementById('showProfit').checked = config.showProfit !== undefined ? config.showProfit : DEFAULT_CONFIG.showProfit;
            document.getElementById('showTargetProfit').checked = config.showTargetProfit !== undefined ? config.showTargetProfit : DEFAULT_CONFIG.showTargetProfit;
            document.getElementById('targetProfit').value = config.targetProfit || DEFAULT_CONFIG.targetProfit;
            document.getElementById('position1Percent').value = config.position1Percent || DEFAULT_CONFIG.position1Percent;
            document.getElementById('position2Percent').value = config.position2Percent || DEFAULT_CONFIG.position2Percent;
            document.getElementById('position3Percent').value = config.position3Percent || DEFAULT_CONFIG.position3Percent;
            document.getElementById('position4Boosters').value = config.position4Boosters || DEFAULT_CONFIG.position4Boosters;
            document.getElementById('position5Boosters').value = config.position5Boosters || DEFAULT_CONFIG.position5Boosters;
            document.getElementById('position6Boosters').value = config.position6Boosters || DEFAULT_CONFIG.position6Boosters;
            document.getElementById('position7Boosters').value = config.position7Boosters || DEFAULT_CONFIG.position7Boosters;
            document.getElementById('position8Boosters').value = config.position8Boosters || DEFAULT_CONFIG.position8Boosters;
            
            // Applica lo stato iniziale
            toggleProfitVisibility();
            toggleTargetProfitVisibility();
            
            // Ricalcola
            calculate();
        }
        
        // Aggiungiamo gli event listeners quando la pagina è caricata
        window.addEventListener('load', function() {
            // Imposta il tema salvato
            const savedTheme = localStorage.getItem('theme');
            if (savedTheme === 'dark') {
                document.body.classList.add('dark-mode');
                document.getElementById('themeToggle').textContent = '🌙';
            }
            
            // Event listener per il toggle del tema
            document.getElementById('themeToggle').addEventListener('click', toggleTheme);
            
            document.getElementById('showProfit').addEventListener('change', toggleProfitVisibility);
            document.getElementById('showTargetProfit').addEventListener('change', toggleTargetProfitVisibility);
            
            // Applica lo stato iniziale
            toggleProfitVisibility();
            toggleTargetProfitVisibility();
            
            // Configura il calcolo automatico
            setupAutoCalculate();
            
            // Esegui il calcolo iniziale
            calculate();
            
            // Aggiungi animazioni sequenziali agli elementi
            const header = document.querySelector('.header');
            header.classList.add('fade-in');
            
            setTimeout(() => {
                document.querySelector('.input-column').classList.add('slide-in-left');
            }, 200);
            
            setTimeout(() => {
                document.querySelector('.prize-column').classList.add('fade-in');
            }, 400);
            
            setTimeout(() => {
                document.querySelector('.finance-column').classList.add('slide-in-right');
            }, 600);
            
            // Aggiungi animazione al pulsante tema
            setTimeout(() => {
                document.getElementById('themeToggle').classList.add('pulse');
                setTimeout(() => {
                    document.getElementById('themeToggle').classList.remove('pulse');
                }, 500);
            }, 1000);
        });
        
        // Funzione per aggiungere feedback visivo ai pulsanti
        function addButtonFeedback() {
            const buttons = document.querySelectorAll('button');
            buttons.forEach(button => {
                button.addEventListener('click', function() {
                    this.classList.add('pulse');
                    setTimeout(() => {
                        this.classList.remove('pulse');
                    }, 500);
                });
            });
        }
        
        // Aggiungi feedback visivo ai pulsanti dopo il caricamento della pagina
        window.addEventListener('DOMContentLoaded', addButtonFeedback);
        
        function calculate() {
            // Input values
            const participants = parseInt(document.getElementById('participants').value) || 0;
            const fee = parseFloat(document.getElementById('fee').value) || 0;
            const boosterPrice = parseFloat(document.getElementById('boosterPrice').value) || 0;
            const rareCards = parseFloat(document.getElementById('rareCards').value) || 0;
            
            // Configurazione bustine extra
            const positionBoosters = [
                parseInt(document.getElementById('position4Boosters').value) || 0,
                parseInt(document.getElementById('position5Boosters').value) || 0,
                parseInt(document.getElementById('position6Boosters').value) || 0,
                parseInt(document.getElementById('position7Boosters').value) || 0,
                parseInt(document.getElementById('position8Boosters').value) || 0
            ];

            // Calcolo montepremi
            const prizePool = participants * fee;
            
            // Verifica se includere le bustine di partecipazione
            const includeParticipationBoosters = document.getElementById('includeParticipationBoosters').checked;
            
            // Calcolo bustine totali
            const participationBoosters = includeParticipationBoosters ? participants : 0;
            const extraBoosters = positionBoosters.reduce((a, b) => a + b, 0);
            const totalBoosters = participationBoosters + extraBoosters;

            // Suggerimento carte rare
            const targetProfit = parseFloat(document.getElementById('targetProfit').value) || 120;
            const actualBoosterCost = totalBoosters * boosterPrice;
            const availableForRares = prizePool - actualBoosterCost - targetProfit;
            const suggestedRare = Math.max(availableForRares, 0);
            
            // Aggiornamento del testo di suggerimento con dettaglio sulle bustine
            let boosterDetails = '';
            if (includeParticipationBoosters) {
                boosterDetails = `${participationBoosters} bustine partecipazione + ${extraBoosters} bustine premio`;
            } else {
                boosterDetails = `${extraBoosters} bustine premio`;
            }
            
            document.getElementById('rareCardsSuggestion').textContent = 
                `(suggerito: ${suggestedRare.toFixed(2)} € per ${targetProfit}€ profitto con ${totalBoosters} bustine totali [${boosterDetails}] a ${boosterPrice.toFixed(2)}€)`;

            // Calcolo costi bustine
            const participationBoostersCost = participationBoosters * boosterPrice;
            const extraBoostersCost = extraBoosters * boosterPrice;
            const totalBoostersCost = participationBoostersCost + extraBoostersCost;

            // Premi carte rare con percentuali personalizzate
            const position1Percent = parseInt(document.getElementById('position1Percent').value) || 60;
            const position2Percent = parseInt(document.getElementById('position2Percent').value) || 30;
            const position3Percent = parseInt(document.getElementById('position3Percent').value) || 10;
            
            // Verifica che la somma sia 100%
            const totalPercent = position1Percent + position2Percent + position3Percent;
            const validationMessage = document.getElementById('percentValidation');
            
            if (totalPercent !== 100) {
                validationMessage.style.display = 'block';
                validationMessage.textContent = `La somma attuale è ${totalPercent}%. Deve essere 100%.`;
            } else {
                validationMessage.style.display = 'none';
            }
            
            // Calcolo premi con percentuali corrette
            const rarePrizes = [
                rareCards * (position1Percent / 100),
                rareCards * (position2Percent / 100),
                rareCards * (position3Percent / 100)
            ];

            // Premi bustine
            const boosterPrizes = positionBoosters.map(b => b * boosterPrice);

            // Aggiornamento etichette premi
            // Aggiorna le etichette per i primi 3 posti con le percentuali personalizzate
            document.getElementById('prize1Label').textContent = `Carte rare (${position1Percent}%)`;
            document.getElementById('prize2Label').textContent = `Carte rare (${position2Percent}%)`;
            document.getElementById('prize3Label').textContent = `Carte rare (${position3Percent}%)`;
            
            // Aggiorna le etichette per i posti con bustine
            positionBoosters.forEach((b, i) => {
                document.getElementById(`prize${i+4}Label`).textContent = 
                    `${b} bustina${b !== 1 ? 'e' : ''} extra (${(b * boosterPrice).toFixed(2)}€)`;
            });

            // Aggiornamento valori tabella
            const prizes = [...rarePrizes, ...boosterPrizes];
            prizes.forEach((prize, index) => {
                document.getElementById(`prize${index + 1}`).textContent = '€' + prize.toFixed(2);
            });

            // Calcolo profitto
            const totalCost = totalBoostersCost + rareCards;
            const profit = prizePool - totalCost;
            
            // Calcolo statistiche aggiuntive
            const averageCostPerPlayer = totalCost / participants;
            const profitPercentage = (profit / prizePool) * 100;
            const prizeToFeeRatio = totalCost / prizePool;
            const totalPrizeValue = totalCost; // Valore totale dei premi (bustine + carte rare)
            const costEfficiency = totalCost > 0 ? prizePool / totalCost : 0; // Rapporto tra incassi e costi

            // Aggiornamento risultati
            document.getElementById('totalPrizePool').textContent = prizePool.toFixed(2);
            document.getElementById('revenue').textContent = '€' + prizePool.toFixed(2);
            document.getElementById('participationBoostersCost').textContent = participationBoostersCost.toFixed(2);
            document.getElementById('extraBoostersCost').textContent = extraBoostersCost.toFixed(2);
            document.getElementById('rareCardsCost').textContent = '€' + rareCards.toFixed(2);
            document.getElementById('totalCost').textContent = '€' + totalCost.toFixed(2);
            document.getElementById('totalBoostersCost').textContent = '€' + totalBoostersCost.toFixed(2);
            
            // Aggiornamento statistiche
            document.getElementById('averageCostPerPlayer').textContent = averageCostPerPlayer.toFixed(2);
            document.getElementById('profitPercentage').textContent = 
                profitPercentage.toFixed(2) + '% ' + (profitPercentage >= 0 ? '✅' : '❌');
            document.getElementById('prizeToFeeRatio').textContent = 
                (prizeToFeeRatio * 100).toFixed(2) + '% ' + (prizeToFeeRatio <= 1 ? '✅' : '⚠️');
            document.getElementById('totalPrizeValue').textContent = totalPrizeValue.toFixed(2);
            document.getElementById('costEfficiency').textContent = 
                costEfficiency.toFixed(2) + 'x ' + (costEfficiency >= 1 ? '✅' : '⚠️');
            
            // Gestione visibilità profitto/perdita
            const profitElement = document.getElementById('profit');
            const profitRow = profitElement.parentElement.parentElement;
            const showProfit = document.getElementById('showProfit').checked;
            
            profitElement.textContent = '€' + profit.toFixed(2);
            profitElement.className = profit >= 0 ? 'green' : 'red';
            profitRow.style.display = showProfit ? '' : 'none';
            
            // Aggiorna il grafico di distribuzione premi
            updatePrizeDistributionChart();
            
            // Aggiorna gli slider se sono stati modificati i campi numerici
            const position1Slider = document.getElementById('position1Slider');
            const position2Slider = document.getElementById('position2Slider');
            const position3Slider = document.getElementById('position3Slider');
            
            if (position1Slider && position1Slider.value != position1Percent) {
                position1Slider.value = position1Percent;
                document.getElementById('position1SliderValue').textContent = position1Percent;
            }
            
            if (position2Slider && position2Slider.value != position2Percent) {
                position2Slider.value = position2Percent;
                document.getElementById('position2SliderValue').textContent = position2Percent;
            }
            
            if (position3Slider && position3Slider.value != position3Percent) {
                position3Slider.value = position3Percent;
                document.getElementById('position3SliderValue').textContent = position3Percent;
            }
            
            // Aggiorna il totale percentuale
            if (document.getElementById('totalPercentage')) {
                document.getElementById('totalPercentage').textContent = totalPercent;
                document.getElementById('percentageStatus').textContent = totalPercent === 100 ? '✅' : '❌';
            }
        }
    </script>
</body>
</html>